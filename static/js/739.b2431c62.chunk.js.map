{"version":3,"file":"static/js/739.b2431c62.chunk.js","mappings":"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","sources":["helpers/app.ts","services/funds/FundService.ts","redux/thunks/fundThunk.ts","services/lps/LPService.ts","redux/thunks/lpThunk.ts","services/pcoFinancials/PCOFinancialService.ts","services/pcos/PCOService.ts","redux/thunks/pcoThunk.ts","services/RestService.ts"],"sourcesContent":["import { ValueGetterParams } from 'ag-grid-community';\r\nimport { Md5 } from 'ts-md5';\r\n\r\n/**\r\n * Getting avatar url\r\n * @param email\r\n * @param size\r\n */\r\nexport const getUserAvatarUrl = (email: string, size = 32): string => {\r\n    const hash = Md5.hashStr(email);\r\n    return `//0.gravatar.com/avatar/${hash}?s=${size}`;\r\n};\r\n\r\nexport const getBrowserLocale = (): string => {\r\n    const locales = getBrowserLocales();\r\n    return locales[0];\r\n};\r\n\r\n/**\r\n * Rounding the number\r\n * @param value\r\n */\r\nexport const roundValue = (value: number | string): number => {\r\n    return Math.floor(+value * 100000000) / 100000000;\r\n};\r\n\r\nexport const getBrowserLocales = (options = {}): string[] => {\r\n    const defaultOptions = {\r\n        languageCodeOnly: false\r\n    };\r\n\r\n    const opt = {\r\n        ...defaultOptions,\r\n        ...options\r\n    };\r\n\r\n    const browserLocales = navigator.languages === undefined ? [navigator.language] : navigator.languages;\r\n\r\n    if (!browserLocales) {\r\n        return [];\r\n    }\r\n\r\n    return browserLocales.map((locale) => {\r\n        const trimmedLocale = locale?.trim();\r\n\r\n        return opt.languageCodeOnly ? trimmedLocale.split(/[-_]/)[0] : trimmedLocale;\r\n    });\r\n};\r\n\r\n/**\r\n * Number formatter with maximum fraction digits of 6\r\n */\r\nexport const numberFormatter = new Intl.NumberFormat(getBrowserLocale(), { maximumFractionDigits: 6 });\r\n\r\n/**\r\n * Crypto number formatter with maximum fraction digits of 8\r\n */\r\nexport const cryptoNumberFormatter = new Intl.NumberFormat(getBrowserLocale(), { maximumFractionDigits: 8 });\r\n\r\n/**\r\n * Fiat number formatter with maximum fraction digits of 2\r\n */\r\nexport const fiatNumberFormatter = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 2,\r\n    minimumFractionDigits: 2\r\n});\r\n\r\n/**\r\n * Fiat number formatter for valuation\r\n */\r\nexport const fiatNumberFormatterNoDecimals = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 0,\r\n    minimumFractionDigits: 0\r\n});\r\n\r\n/**\r\n * Fiat number formatter for valuation\r\n */\r\nexport const prePostMoneyNumberFormatter = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 1,\r\n    minimumFractionDigits: 1\r\n});\r\n\r\n/**\r\n * Fiat number formatter for valuation\r\n */\r\nexport const forexNumberFormatter = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 4,\r\n    minimumFractionDigits: 4\r\n});\r\n\r\n/**\r\n * Number formatter with maximum fraction digits of 4\r\n */\r\nexport const customPriceFormatter = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 4,\r\n    minimumFractionDigits: 4\r\n});\r\n\r\n/**\r\n * Check if values is empty\r\n * @param value\r\n */\r\nexport const isValueEmpty = (value: any): boolean => {\r\n    return value === undefined ||\r\n        value === null ||\r\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\r\n        (typeof value === 'string' && value?.trim().length === 0);\r\n};\r\n\r\n/**\r\n * Number formatter with maximum fraction digits of 1\r\n */\r\nconst formatter1 = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 1,\r\n    minimumFractionDigits: 1\r\n});\r\n\r\n/**\r\n * Number formatter with maximum fraction digits of 2\r\n */\r\nconst formatter2 = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 2,\r\n    minimumFractionDigits: 2\r\n});\r\n\r\n/**\r\n * Number formatter with maximum fraction digits of 3\r\n */\r\nconst formatter3 = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 3,\r\n    minimumFractionDigits: 3\r\n});\r\n\r\n/**\r\n * Number formatter with maximum fraction digits of 4\r\n */\r\nconst formatter4 = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 4,\r\n    minimumFractionDigits: 4\r\n});\r\n\r\n/**\r\n * Number formatter with maximum fraction digits of 5\r\n */\r\nconst formatter5 = new Intl.NumberFormat(getBrowserLocale(), {\r\n    maximumFractionDigits: 5,\r\n    minimumFractionDigits: 5\r\n});\r\n\r\n\r\n/**\r\n * Format margin\r\n * @param value\r\n */\r\nexport const formatMargin = (value: number | string): string => {\r\n    const v = roundValue(+value);\r\n    return formatter4.format(v);\r\n};\r\n\r\n/**\r\n * Format price\r\n * @param value\r\n */\r\nexport const formatPrice = (value: number) => {\r\n    value = +value;\r\n\r\n    if (value === 0) {\r\n        return '0';\r\n    }\r\n\r\n    if (value >= 1000) {\r\n        return formatter1.format(value);\r\n    }\r\n\r\n    if (value >= 100) {\r\n        return formatter2.format(value);\r\n    }\r\n\r\n    if (value >= 10) {\r\n        return formatter3.format(value);\r\n    }\r\n\r\n    if (value >= 1) {\r\n        return formatter4.format(value);\r\n    }\r\n\r\n    return formatter5.format(value);\r\n};\r\n\r\nexport const formatPercentage = (value: number) => {\r\n    return formatter2.format(value);\r\n};\r\n\r\n/**\r\n * Format value\r\n * @param value\r\n */\r\nexport const formatValue = (value: string) => {\r\n    if (value.length > 1) {\r\n        // eslint-disable-next-line\r\n        value = value.replace(/[^0-9.]/g, '');\r\n        if (!value.includes('.') && value[0] === '0' && value[1] === '0') {\r\n            value = '0';\r\n        } else if (!value.includes('.') && value[0] === '0' && value[1] !== '0') {\r\n            value = value[1];\r\n        } else if (value.split('.').length >= 2) {\r\n            value = value.replace(/\\.+$/, '');\r\n        }\r\n    }\r\n    return value;\r\n};\r\n\r\n\r\n/**\r\n * Capitalize first letter\r\n * @param value\r\n */\r\nexport const capitalizeLetters = (value: string): string | undefined => {\r\n    let newString = '';\r\n    if (value?.match(/[A-Z][a-z]+/g)) {\r\n        const arr = value.split(/(?=[A-Z])/);\r\n\r\n        arr.forEach((a) => {\r\n            newString = newString + `${a?.charAt(0).toUpperCase() + a?.slice(1)} `;\r\n        });\r\n\r\n        return newString;\r\n    } else {\r\n        return value?.charAt(0).toUpperCase() + value?.slice(1);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes scientific notation\r\n * @param quantityValue\r\n * @return string\r\n */\r\nexport const avoidScientificNotation = (quantityValue: any) => {\r\n    if (Math.abs(quantityValue) < 1.0) {\r\n        const e = parseInt(quantityValue.toString().split('e-')[1]);\r\n        if (e) {\r\n            quantityValue *= Math.pow(10, e - 1);\r\n            quantityValue = '0.' + (new Array(e)).join('0') + quantityValue.toString().substring(2);\r\n        }\r\n    } else {\r\n        let e = parseInt(quantityValue.toString().split('+')[1]);\r\n        if (e > 20) {\r\n            e -= 20;\r\n            quantityValue /= Math.pow(10, e);\r\n            quantityValue += (new Array(e + 1)).join('0');\r\n        }\r\n    }\r\n    return quantityValue;\r\n};\r\n\r\n\r\nexport const priceWithMax8FractionDigits = (quantity: number | string) => {\r\n    const numberWithFormatting = cryptoNumberFormatter.format(+quantity);\r\n\r\n    return numberWithFormatting;\r\n};\r\n\r\n/**\r\n * Amount formatter\r\n */\r\nexport const amountValueFormatter = (amount: number | string, currency: string) => {\r\n    if (amount) {\r\n        return fiatNumberFormatterNoDecimals.format(+amount);\r\n    }\r\n    return amount;\r\n};\r\n\r\nexport const amountValueGetter = (params: ValueGetterParams): number => {\r\n    if (params.data) {\r\n        return params.data.quantity * params.data.price;\r\n    } else\r\n        return 0;\r\n};\r\n\r\n\r\n","import { FundSummary } from '../../models/funds/fundModels';\r\nimport { RestService } from '../RestService';\r\n\r\nexport class FundDataService extends RestService {\r\n    private _baseUrl = './fundsShort.json';\r\n\r\n    /**\r\n     * Gets the lp data that is in a json file in the public folder for now later will be a service\r\n     * @return LP[]\r\n     */\r\n    public async getAllFunds(): Promise<FundSummary[]> {\r\n        return this.fetchData(this._baseUrl).then((res: any) => {\r\n            return res.data;\r\n        }).catch((err: any) => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { FundDataService } from \"../../services/funds/FundService\";\r\nimport { setErrorMessage } from \"../slices/appSlice\";\r\nimport { setFunds } from \"../slices/funds/fundsSlice\";\r\n\r\n/**\r\n * Fetch all fnds\r\n */\r\nexport const fetchFunds: any = () => async (dispatch: any) => {\r\n    try {\r\n        const fundsService = new FundDataService();\r\n        const data = await fundsService.getAllFunds();\r\n        dispatch(setFunds(data));\r\n    } catch (error: any) {\r\n        dispatch(setErrorMessage(error));\r\n    }\r\n}import { RestService } from '../RestService';\r\nimport { LP } from \"../../models/lps/lpModels\";\r\n\r\nexport class LPDataService extends RestService {\r\n    private _baseUrl = './lpshort.json';\r\n\r\n    /**\r\n     * Gets the lp data that is in a json file in the public folder for now later will be a service\r\n     * @return LP[]\r\n     */\r\n    public async getAllLPs(): Promise<LP[]> {\r\n        return this.fetchData(this._baseUrl).then((res: any) => {\r\n            return res.data;\r\n        }).catch((err: any) => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n    }\r\n\r\n}\r\n\r\n","import { LPDataService } from \"../../services/lps/LPService\";\r\nimport { setErrorMessage } from \"../slices/appSlice\";\r\nimport { setLPs } from \"../slices/lps/lpsSlice\";\r\n\r\n/**\r\n * Fetch all client data\r\n */\r\nexport const fetchLPs: any = () => async (dispatch: any) => {\r\n    try {\r\n        const lpsService = new LPDataService();\r\n        const data = await lpsService.getAllLPs();\r\n        dispatch(setLPs(data));\r\n    } catch (error: any) {\r\n        dispatch(setErrorMessage(error));\r\n    }\r\n};","import { PCOFinancial } from '../../models/pcos/pcoModels';\r\nimport { RestService } from '../RestService';\r\n\r\nexport class PCOFinancialsDataService extends RestService {\r\n    private _baseUrl = './pcoNavLatests.json';\r\n\r\n    /**\r\n     * Gets the pco data that is in a json file in the public folder for now later will be a service\r\n     * @return PCOFinancial[]\r\n     */\r\n    public async getAllPCOsFinancials(): Promise<PCOFinancial[]> {\r\n        return this.fetchData(this._baseUrl).then((res: any) => {\r\n            return res.data;\r\n        }).catch((err: any) => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n    }\r\n\r\n}\r\n\r\n","import { PCOSummary } from '../../models/pcos/pcoModels';\r\nimport { RestService } from '../RestService';\r\n\r\nexport class PCODataService extends RestService {\r\n    private _baseUrl = './pcosshort.json';\r\n\r\n    /**\r\n     * Gets the pco data that is in a json file in the public folder for now later will be a service\r\n     * @return PCOSummary[]\r\n     */\r\n    public async getAllPCOs(): Promise<PCOSummary[]> {\r\n        return this.fetchData(this._baseUrl).then((res: any) => {\r\n            return res.data;\r\n        }).catch((err: any) => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n    }\r\n\r\n}\r\n\r\n","import { PCOFinancialsDataService } from \"../../services/pcoFinancials/PCOFinancialService\";\r\nimport { PCODataService } from \"../../services/pcos/PCOService\";\r\nimport { setErrorMessage } from \"../slices/appSlice\";\r\nimport { setPCOs, setPCOsFinantials } from \"../slices/pcos/pcosSlice\";\r\n\r\n/**\r\n * Fetch all pcos\r\n */\r\nexport const fetchPCOs: any = () => async (dispatch: any) => {\r\n    try {\r\n        const pcosService = new PCODataService();\r\n        const data = await pcosService.getAllPCOs();\r\n        dispatch(setPCOs(data));\r\n    } catch (error: any) {\r\n        dispatch(setErrorMessage(error));\r\n    }\r\n};\r\n\r\n/**\r\n * Fetch all pcos Financials\r\n */\r\nexport const fetchPCOsFinantials: any = () => async (dispatch: any) => {\r\n    try {\r\n        const pcosFinantialService = new PCOFinancialsDataService();\r\n        const data = await pcosFinantialService.getAllPCOsFinancials();\r\n        dispatch(setPCOsFinantials(data));\r\n    } catch (error: any) {\r\n        dispatch(setErrorMessage(error));\r\n    }\r\n};\r\n","import axios, { AxiosResponse } from 'axios';\r\n\r\nexport abstract class RestService {\r\n\r\n    /**\r\n     * Abstract method to fetch data from api's\r\n     * @param subPath\r\n     * @param params\r\n     * @protected\r\n     */\r\n    protected async fetchData(subPath: string, params: any = undefined): Promise<AxiosResponse> {\r\n        const path = `${subPath}`;\r\n        try {\r\n            return await axios.get(path, params);\r\n        } catch (err: any) {\r\n            console.log(err.message);\r\n            return err.message;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Abstract method to post data to the api\r\n     * @param subPath\r\n     * @param body\r\n     * @protected\r\n     */\r\n    protected async postData(subPath: string, body: any): Promise<AxiosResponse> {\r\n        const path = `${subPath}`;\r\n        try {\r\n            return await axios.post(path, body);\r\n        } catch (err: any) {\r\n            console.log(err.message);\r\n            return err.message;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Abstract method to update data\r\n     * @param subPath\r\n     * @param body\r\n     * @protected\r\n     */\r\n    protected async putData(subPath: string, body: any = undefined): Promise<AxiosResponse> {\r\n        const path = `${subPath}`;\r\n        try {\r\n            return await axios.patch(path, body);\r\n        } catch (err: any) {\r\n            console.log(err.message);\r\n            return err.message;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Abstract method to delete data\r\n     * @param subPath\r\n     * @protected\r\n     */\r\n    protected async deleteData(subPath: string): Promise<AxiosResponse> {\r\n        const path = `${subPath}`;\r\n        try {\r\n            return await axios.delete(path);\r\n        } catch (err: any) {\r\n            console.log(err.message);\r\n            return err.message;\r\n        }\r\n    }\r\n}\r\n"],"names":["getBrowserLocale","getBrowserLocales","options","arguments","length","undefined","opt","_objectSpread","languageCodeOnly","browserLocales","navigator","languages","language","map","locale","trimmedLocale","trim","split","fiatNumberFormatterNoDecimals","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","prePostMoneyNumberFormatter","forexNumberFormatter","isValueEmpty","value","Object","keys","capitalizeLetters","newString","match","forEach","a","concat","charAt","toUpperCase","slice","amountValueFormatter","amount","currency","format","FundDataService","_RestService","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","apply","_baseUrl","_createClass","key","_getAllFunds","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","this","fetchData","then","res","data","catch","err","console","log","stop","RestService","fetchFunds","_ref","dispatch","fundsService","getAllFunds","sent","setFunds","t0","setErrorMessage","_x","LPDataService","_getAllLPs","fetchLPs","lpsService","getAllLPs","setLPs","PCOFinancialsDataService","_getAllPCOsFinancials","PCODataService","_getAllPCOs","fetchPCOs","pcosService","getAllPCOs","setPCOs","fetchPCOsFinantials","_ref2","_callee2","pcosFinantialService","_context2","getAllPCOsFinancials","setPCOsFinantials","_x2","_fetchData","subPath","params","path","_args","axios","message","_postData","body","_x3","_putData","_callee3","_args3","_context3","_x4","_deleteData","_callee4","_context4","_x5"],"sourceRoot":""}