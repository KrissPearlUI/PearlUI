{"version":3,"file":"static/js/998.50f94edc.chunk.js","mappings":"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","sources":["components/lps/single/basic/LPFundsTable.tsx","components/lps/single/basic/LPPCOsTable.tsx","components/lps/single/basic/LPCommitmentsTable.tsx","components/lps/single/basic/LPExitsTable.tsx","components/lps/single/basic/SingleLPBasicComponent.tsx","components/lps/single/commitments/SingleLPCommitmentsComponent.tsx","components/lps/single/coinvestments/SingleLPCoinvestments.tsx","components/lps/single/callsAndDistributions/LPCallsTable.tsx","components/lps/single/callsAndDistributions/LPDistributionsTable.tsx","components/lps/single/callsAndDistributions/SingleLPCallsAndDistributions.tsx","components/lps/single/transactions/SingleLPTransactions.tsx","components/lps/single/documents/SingleLPDocuments.tsx","components/lps/single/portfolios/InvestmentsOverTime.tsx","components/lps/single/portfolios/SingleLPPortfoliosComponents.tsx","components/lps/single/AutocompleteLP.tsx","components/lps/single/DatePickerLP.tsx","components/lps/single/SelectionComponentLP.tsx","components/lps/single/FiltersAndActionsLP.tsx","pages/lps/single/SingleLPPage.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef, ValueSetterParams } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund } from '../../../../models/lps/lpModels';\r\nimport { getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst LPFundsTable = () => {\r\n    const classes = useStyles();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const [, setGridApi] = useState<GridApi>();\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<Fund[]>([]);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Id',\r\n                field: 'id',\r\n                headerTooltip: 'Fund ID',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.id;\r\n                },\r\n                tooltipField: 'id',\r\n                minWidth:90,\r\n                maxWidth:100,\r\n                valueSetter: (params) => valueSetter(params, 'id'),\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Name',\r\n                headerTooltip: 'Fund Name',\r\n                field: 'fundName',\r\n                tooltipField: 'fundName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Committed Amount',\r\n                headerTooltip: 'Committed Amount',\r\n                field: 'committedAmount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'committedAmount',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                headerTooltip: 'Fund Currency',\r\n                field: 'fundCurrency',\r\n                enableRowGroup: true,\r\n                minWidth:90,\r\n                maxWidth:120,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params: ValueSetterParams, field: string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        setRowData(selectedLP?.funds ?? []);\r\n    }, [selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{ flex: 1 }}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                domLayout={'autoHeight'}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default LPFundsTable;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { PCO } from '../../../../models/lps/lpModels';\r\nimport { getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst LPPCOsTable = () => {\r\n    const classes = useStyles();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const [, setGridApi] = useState<GridApi>();\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<PCO[]>([]);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        paginationPageSize:5,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Short Name',\r\n                headerTooltip: 'Portfolio Company Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'fundName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Participation Percentage',\r\n                headerTooltip: 'Participation in Percentage',\r\n                field: 'participationPercentage',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountInvested',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: percentageyValueFormatter,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setRowData(selectedLP?.pcos ?? []);\r\n    }, [selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{ flex: 1 }}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                domLayout={'autoHeight'}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default LPPCOsTable;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef, ValueSetterParams } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { CommitmentBasic, LP } from '../../../../models/lps/lpModels';\r\nimport { dateValueFormatter, getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst LPCommitmentsTable = () => {\r\n    const classes = useStyles();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const [, setGridApi] = useState<GridApi>();\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<CommitmentBasic[]>([]);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Date',\r\n                headerTooltip: 'Commitment Date',\r\n                field: 'date',\r\n                minWidth: 100,\r\n                maxWidth: 140,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Short Name',\r\n                headerTooltip: 'Fund Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'shortName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Committed Amount',\r\n                headerTooltip: 'Committed Amount',\r\n                field: 'committedAmount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'committedAmount',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                headerTooltip: 'Fund Currency',\r\n                field: 'fundCurrency',\r\n                minWidth: 90,\r\n                maxWidth: 120,\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params: ValueSetterParams, field: string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setRowData(selectedLP?.commitments ?? []);\r\n    }, [selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{ flex: 1, overflowX: 'auto' }}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                domLayout={'autoHeight'}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default LPCommitmentsTable;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef, ValueSetterParams } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Exits } from '../../../../models/lps/lpModels';\r\nimport { dateValueFormatter, getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst LPExitsTable = () => {\r\n    const classes = useStyles();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const [, setGridApi] = useState<GridApi>();\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<Exits[]>([]);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        paginationPageSize:5,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Date',\r\n                headerTooltip: 'Exit Date',\r\n                field: 'date',\r\n                minWidth: 100,\r\n                maxWidth: 140,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Short Name',\r\n                headerTooltip: 'Portfolio Company Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'shortName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Amount Returned',\r\n                headerTooltip: 'Amount returned',\r\n                field: 'amountGained',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountGained',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                headerTooltip: 'Fund Currency',\r\n                field: 'fundCurrency',\r\n                enableRowGroup: true,\r\n                minWidth:90,\r\n                maxWidth:120,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params: ValueSetterParams, field: string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        setRowData(selectedLP?.exits ?? []);\r\n    }, [selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{ flex: 1 }}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                domLayout={'autoHeight'}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default LPExitsTable;\r\n","import { Accordion, AccordionDetails, AccordionSummary, Grid, IconButton, Paper, Typography } from '@mui/material';\r\nimport { darken, lighten, useTheme } from \"@mui/material/styles\";\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport LPFundsTable from './LPFundsTable';\r\nimport LPPCOsTable from './LPPCOsTable';\r\nimport LPCommitmentsTable from './LPCommitmentsTable';\r\nimport moment from 'moment';\r\nimport LPExitsTable from './LPExitsTable';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\n\r\nconst SingleLPBasic = () => {\r\n    const theme = useTheme();\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const [isCommitmentsExpand, setIsCommitmentsExpand] = useState<boolean>(false);\r\n    const [isFundsExpand, setIsFundsExpand] = useState<boolean>(false);\r\n    const [isPCOsExpand, setIsPCOsExpand] = useState<boolean>(false);\r\n    const [isExitsExpand, setIsExitsExpand] = useState<boolean>(false);\r\n\r\n    const handleAccordionExp = (expanded: boolean, accordionId: string) => {\r\n        if (accordionId === 'card-commitments') {\r\n            setIsCommitmentsExpand(!isCommitmentsExpand);\r\n        } else if (accordionId === 'card-funds') {\r\n            setIsFundsExpand(!isFundsExpand);\r\n        } else if (accordionId === 'card-pcos') {\r\n            setIsPCOsExpand(!isPCOsExpand);\r\n        } else {\r\n            setIsExitsExpand(!isExitsExpand);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{ display: 'flex', flex: 1, justifyContent: 'flex-start', alignItems: 'flex-start', flexDirection: 'row', paddingRight: '0.5em', overflow: 'auto' }}>\r\n            <Grid item xs={12}>\r\n                <Paper elevation={3} sx={{ backgroundColor: theme.palette.background.paper, padding: '1em' }}>\r\n                    <Grid container spacing={1} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', flexDirection: 'row' }}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Domicile:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.country}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Address:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.address}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Website:</Typography>\r\n                                <a style={{ fontFamily: 'Raleway' }}\r\n                                    href={`https://${selectedLP?.website}`}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noreferrer\"\r\n                                >\r\n                                    {selectedLP?.website}\r\n                                </a>\r\n                                {/* <Typography sx={{color:theme.palette.text.primary,fontWeight:500}}>{selectedLP?.website}</Typography> */}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>First Investment:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.firstInvestment ? moment(new Date(selectedLP?.firstInvestment)).format('DD MMM YYYY') : ''}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Type:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.type}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Main Contact:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.mainContact}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Relationship Partner:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.relationshipPartner}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Relationship SS:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.relationshipSS}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sx={{ flex: 1, overflow: 'auto' }}>\r\n                <Paper elevation={3} sx={{ backgroundColor: theme.palette.background.paper, padding: '1em' }}>\r\n                    <Grid container spacing={1} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', flexDirection: 'row' }}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Accordion\r\n                                    elevation={0}\r\n                                    key={`card-commitments`}\r\n                                    expanded={isCommitmentsExpand}\r\n                                    onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-commitments')}\r\n                                    sx={{ backgroundColor: 'transparent' }}\r\n                                /* sx={{\r\n                                    'marginBottom': '0.5em',\r\n                                    'width': '100%',\r\n                                    'flexDirection': 'column',\r\n                                    'borderRadius': 5,\r\n                                    'backgroundColor': theme.palette.background.paper,\r\n                                    \r\n                                }} */\r\n                                >\r\n                                    <AccordionSummary\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'flex-start',\r\n                                            width: '340px',\r\n                                            borderBottom: `1px solid ${theme.palette.mode === 'dark' ? darken(theme.palette.text.primary, 0.6) : lighten(theme.palette.text.primary, 0.7)}`,\r\n                                            '&:hover': {\r\n                                                borderBottom: `1px solid ${theme.palette.text.primary}`,\r\n                                            },\r\n                                            '& .Mui-expanded': {\r\n                                                borderBottom: 'none',\r\n                                            }\r\n                                        }}\r\n                                        /* sx={{\r\n                                            'cursor': 'pointer',\r\n                                            'width': '100%',\r\n                                            'minHeight': '68px !important',\r\n                                            'paddingTop': 0,\r\n                                            'backgroundColor': theme.palette.background.paper,\r\n                                        \r\n                                        }} */\r\n                                        expandIcon={\r\n                                            <IconButton >\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{\r\n                                                        pointerEvents: 'auto', cursor: 'pointer',\r\n                                                        '&:hover': {\r\n                                                            color: theme.palette.text.primary,\r\n                                                        }\r\n                                                    }} />\r\n                                            </IconButton>\r\n                                        }\r\n                                    >\r\n                                        <Grid container spacing={2}\r\n                                        >\r\n                                            <Grid item sx={{ marginLeft: '-1em' }}>\r\n                                                <Typography sx={{ color: theme.palette.secondary.main, fontWeight: 400 }}>Number of Commitments:</Typography>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                                    {selectedLP?.commitments?.length ?? 0}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </AccordionSummary>\r\n                                    {isCommitmentsExpand && selectedLP?.commitments && <AccordionDetails\r\n                                        sx={{\r\n                                            backgroundColor: theme.palette.background.paper,\r\n                                            width: '100%', padding: '0.1em', display: 'flex', height: '100%', pointerEvents: 'auto', minWidth: { xs: '430px', md: '600px', lg: '600px' }, overflow: 'auto'\r\n                                        }}>\r\n                                        <LPCommitmentsTable />\r\n                                    </AccordionDetails>}\r\n                                </Accordion>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex', flex: 1 }}>\r\n                                <Accordion\r\n                                    elevation={0}\r\n                                    key={`card-funds`}\r\n                                    expanded={isFundsExpand}\r\n                                    onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-funds')}\r\n                                    sx={{ backgroundColor: 'transparent' }}\r\n                                /* sx={{\r\n                                    'marginBottom': '0.5em',\r\n                                    'width': '100%',\r\n                                    'flexDirection': 'column',\r\n                                    'borderRadius': 5,\r\n                                    'backgroundColor': theme.palette.background.paper,\r\n                                    \r\n                                }} */\r\n                                >\r\n                                    <AccordionSummary\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'flex-start',\r\n                                            width: '340px',\r\n                                            borderBottom: `1px solid ${theme.palette.mode === 'dark' ? darken(theme.palette.text.primary, 0.6) : lighten(theme.palette.text.primary, 0.7)}`,\r\n                                            '&:hover': {\r\n                                                borderBottom: `1px solid ${theme.palette.text.primary}`,\r\n                                            },\r\n                                            '& .Mui-expanded': {\r\n                                                borderBottom: 'none',\r\n                                            }\r\n                                        }}\r\n                                        /* sx={{\r\n                                            'cursor': 'pointer',\r\n                                            'width': '100%',\r\n                                            'minHeight': '68px !important',\r\n                                            'paddingTop': 0,\r\n                                            'backgroundColor': theme.palette.background.paper,\r\n                                        \r\n                                        }} */\r\n                                        expandIcon={\r\n                                            <IconButton>\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{\r\n                                                        pointerEvents: 'auto', cursor: 'pointer',\r\n                                                        '&:hover': {\r\n                                                            color: theme.palette.text.primary,\r\n                                                        }\r\n                                                    }} />\r\n                                            </IconButton>\r\n                                        }\r\n                                    >\r\n                                        <Grid container spacing={2}\r\n                                        >\r\n                                            <Grid item sx={{ marginLeft: '-1em' }}>\r\n                                                <Typography sx={{ color: theme.palette.secondary.main, fontWeight: 400 }}>Number of Funds:</Typography>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                                    {selectedLP?.funds?.length ?? 0}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </AccordionSummary>\r\n                                    {isFundsExpand && selectedLP?.funds && <AccordionDetails\r\n                                        sx={{\r\n                                            backgroundColor: theme.palette.background.paper,\r\n                                            display: 'flex', height: '100%', pointerEvents: 'auto', flex: 1, marginLeft: '-1em', width: '100%', minWidth: { xs: '430px', md: '600px', lg: '600px' }, overflow: 'auto'\r\n                                        }}>\r\n                                        <LPFundsTable />\r\n                                    </AccordionDetails>}\r\n                                </Accordion>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Of which terminated:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.terminated ? selectedLP.terminated.length : 0}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Accordion\r\n                                    elevation={0}\r\n                                    key={`card-pcos`}\r\n                                    expanded={isPCOsExpand}\r\n                                    onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-pcos')}\r\n                                    sx={{ backgroundColor: 'transparent' }}\r\n\r\n                                >\r\n                                    <AccordionSummary\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'flex-start',\r\n                                            width: '340px',\r\n                                            borderBottom: `1px solid ${theme.palette.mode === 'dark' ? darken(theme.palette.text.primary, 0.6) : lighten(theme.palette.text.primary, 0.7)}`,\r\n                                            '&:hover': {\r\n                                                borderBottom: `1px solid ${theme.palette.text.primary}`,\r\n                                            },\r\n                                            '& .Mui-expanded': {\r\n                                                borderBottom: 'none',\r\n                                            }\r\n                                        }}\r\n\r\n                                        expandIcon={\r\n                                            <IconButton>\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{\r\n                                                        pointerEvents: 'auto', cursor: 'pointer',\r\n                                                        '&:hover': {\r\n                                                            color: theme.palette.text.primary,\r\n                                                        }\r\n                                                    }} />\r\n                                            </IconButton>\r\n                                        }\r\n                                    >\r\n                                        <Grid container spacing={2}\r\n                                        >\r\n                                            <Grid item sx={{ marginLeft: '-1em' }}>\r\n                                                <Typography sx={{ color: theme.palette.secondary.main, fontWeight: 400 }}>Number of PCOs:</Typography>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                                    {selectedLP?.pcos?.length ?? 0}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </AccordionSummary>\r\n                                    {isPCOsExpand && selectedLP?.pcos && <AccordionDetails\r\n                                        sx={{\r\n                                            backgroundColor: theme.palette.background.paper,\r\n                                            width: '100%', padding: '0.1em', display: 'flex', height: '100%', pointerEvents: 'auto', marginLeft: { xs: 0, md: '-2em', lg: '-2em' }, minWidth: { xs: '430px', md: '450px', lg: '450px' }, overflow: 'auto'\r\n                                        }}>\r\n                                        <LPPCOsTable />\r\n                                    </AccordionDetails>}\r\n                                </Accordion>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Accordion\r\n                                    elevation={0}\r\n                                    key={`card-exits`}\r\n                                    expanded={isExitsExpand}\r\n                                    onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-exits')}\r\n                                    sx={{ backgroundColor: 'transparent' }}\r\n\r\n                                >\r\n                                    <AccordionSummary\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'flex-start',\r\n                                            width: '340px',\r\n                                            borderBottom: `1px solid ${theme.palette.mode === 'dark' ? darken(theme.palette.text.primary, 0.6) : lighten(theme.palette.text.primary, 0.7)}`,\r\n                                            '&:hover': {\r\n                                                borderBottom: `1px solid ${theme.palette.text.primary}`,\r\n                                            },\r\n                                            '& .Mui-expanded': {\r\n                                                borderBottom: 'none',\r\n                                            }\r\n                                        }}\r\n\r\n                                        expandIcon={\r\n                                            <IconButton>\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{\r\n                                                        pointerEvents: 'auto', cursor: 'pointer',\r\n                                                        '&:hover': {\r\n                                                            color: theme.palette.text.primary,\r\n                                                        }\r\n                                                    }} />\r\n                                            </IconButton>\r\n                                        }\r\n                                    >\r\n                                        <Grid container spacing={2}\r\n                                        >\r\n                                            <Grid item sx={{ marginLeft: '-1em' }}>\r\n                                                <Typography sx={{ color: theme.palette.secondary.main, fontWeight: 400 }}>Number of Exits:</Typography>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                                    {selectedLP?.exits?.length ?? 0}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </AccordionSummary>\r\n                                    {isExitsExpand && selectedLP?.exits && <AccordionDetails\r\n                                        sx={{\r\n                                            backgroundColor: theme.palette.background.paper,\r\n                                            width: '100%', padding: '0.1em', display: 'flex', height: '100%', pointerEvents: 'auto', marginLeft: { xs: 0, md: '-3em', lg: '-3em' }, minWidth: { xs: '430px', md: '530px', lg: '530px' }, overflow: 'auto'\r\n                                        }}>\r\n                                        <LPExitsTable />\r\n                                    </AccordionDetails>}\r\n                                </Accordion>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper elevation={3} sx={{ backgroundColor: theme.palette.background.paper, padding: '1em' }}>\r\n                    <Grid container spacing={1} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', flexDirection: 'row' }}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex', justifyContent: 'space-between', width: { xs: '290px', md: '270px', lg: '270px' } }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Management Fee:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500, textAlign: 'right', alignSelf: 'end' }}>\r\n                                    {selectedLP?.fees && selectedLP.fees.filter(x => x.feeType === 'Management Fee')[0] ? `${amountValueFormatter(selectedLP.fees.filter(x => x.feeType === 'Management Fee')[0]?.amount / 5, '')} EUR` : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex', justifyContent: 'space-between', width: { xs: '290px', md: '270px', lg: '270px' } }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Capital Paid In:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500, textAlign: 'right' }}>{selectedLP?.capPaidIn}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex', justifyContent: 'space-between', width: { xs: '290px', md: '270px', lg: '270px' } }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Capital Distributed:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500, textAlign: 'right' }}>{selectedLP?.totalDistributions ? `${amountValueFormatter(selectedLP?.totalDistributions ?? 0, '')} EUR` : ''}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex', justifyContent: 'space-between', width: { xs: '290px', md: '270px', lg: '270px' } }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Capital Invested:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500, textAlign: 'right' }}>{selectedLP?.totalInvestments ? `${amountValueFormatter(selectedLP?.totalInvestments ?? 0, '')} EUR` : ''}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex', justifyContent: 'space-between', width: { xs: '290px', md: '270px', lg: '270px' } }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Recycling Reserves:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                    {selectedLP?.fees && selectedLP.fees.filter(x => x.feeType === 'Recycling Reserves')[0] ? `${amountValueFormatter(selectedLP.fees.filter(x => x.feeType === 'Recycling Reserves')[0]?.amount ?? 0, '')} EUR` : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Capital Available:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.capAvailable}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Dry Powder:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.dryPowder}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Reserved:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.reserved}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Avg. Deals Available:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.avgDealsAvailable}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Tapped Out:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.tappedOot ? 'Yes' : 'No'}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Estimated Until Tapped Out:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>{selectedLP?.dateTappedOut}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper elevation={3} sx={{ backgroundColor: theme.palette.background.paper, padding: '1em' }}>\r\n                    <Grid container spacing={1} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', flexDirection: 'row' }}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Net DPI:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                    {selectedLP?.kpis && selectedLP.kpis.netDPI ? selectedLP.kpis.netDPI : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Gross DPI:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                    {selectedLP?.kpis && selectedLP.kpis.grossDPI ? selectedLP.kpis.grossDPI : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Net TVPI:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                    {selectedLP?.kpis && selectedLP.kpis.netTVPI ? selectedLP.kpis.netTVPI : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Gross TVPI:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                    {selectedLP?.kpis && selectedLP.kpis.grossTVPI ? selectedLP.kpis.grossTVPI : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Net IRR:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                    {selectedLP?.kpis && selectedLP.kpis.netIRR ? `${(selectedLP.kpis.netIRR * 100).toFixed(2)} %` : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{ display: 'flex' }}>\r\n                                <Typography sx={{ color: theme.palette.secondary.main, marginRight: '0.5em', fontWeight: 400 }}>Gross IRR:</Typography>\r\n                                <Typography sx={{ color: theme.palette.text.primary, fontWeight: 500 }}>\r\n                                    {selectedLP?.kpis && selectedLP.kpis.grossIRR ? selectedLP.kpis.grossIRR : ''}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SingleLPBasic;","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent, INumberFilterParams, IStatusPanelParams } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { ColDef, Column } from 'ag-grid-community';\r\nimport clsx from 'clsx';\r\nimport { ColGroupDef, ValueGetterParams, ValueSetterParams } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { CommitmentBasic } from '../../../../models/lps/lpModels';\r\nimport { dateValueFormatter, getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter, DefaultSideBarDef, filterParams, dateFilterParams } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { fetchCashCalls } from '../../../../redux/thunks/cashCallsThunk';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingRight: '0.7em',\r\n        }\r\n    })\r\n);\r\n\r\n\r\nconst CustomStatusBar = (props: any) => {\r\n    const theme = useTheme();\r\n\r\n    const sumCommittedAmount = () => {\r\n        const api = props.api;\r\n        let sumCommitted = 0;\r\n        api.forEachNode((node: any) => {\r\n            if (node.group) {\r\n                return;\r\n            }\r\n            sumCommitted += Number(node.data.committedAmount);\r\n        });\r\n        return <div>Committed Amount: <strong>{amountValueFormatter(sumCommitted ?? 0, '')}</strong></div>;\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"ag-status-bar\" role=\"status\">\r\n            <div className=\"ag-status-bar-part ag-status-name-value\" style={{ fontFamily: 'Raleway', color: theme.palette.mode==='dark'?'white':'black', lineHeight:1.5, fontWeight:500}}>\r\n                {sumCommittedAmount()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface SingleLPCommitmentsProps {\r\n    setGridApi: any\r\n}\r\n\r\nconst SingleLPCommitments = ({ setGridApi }: SingleLPCommitmentsProps) => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<any[]>([]);\r\n    const gridApiRef = useRef<GridApi>();\r\n    const [totals, setTotals] = useState<Record<string, number>>({});\r\n\r\n    interface FrameworkComponentsProps {\r\n        agColumnHeader: React.FC<{\r\n            column: Column;\r\n            totals: Record<string, number>;\r\n        }>;\r\n    }\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        // statusBar: DefaultStatusPanelDef,\r\n        sideBar: DefaultSideBarDef,\r\n        // enableStatusBar: true,\r\n        /* groupIncludeFooter: true,\r\n        groupIncludeTotalFooter: true */\r\n        statusBar: {\r\n            statusPanels: [\r\n                {\r\n                    statusPanel: 'agTotalRowCountComponent',\r\n                    align: 'left',\r\n                },\r\n                {\r\n                    statusPanelFramework: CustomStatusBar,\r\n                },\r\n            ],\r\n        }\r\n    };\r\n\r\n    const sumAggFunc = useCallback((params: any) => {\r\n        let sum = 0;\r\n        if (params.values) {\r\n            params.values.forEach((value: any) => {\r\n                if (typeof value === 'number') {\r\n                    sum += value;\r\n                }\r\n            });\r\n            return sum;\r\n        }\r\n    }, []);\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'CRM ID',\r\n                headerTooltip:'CRM ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                headerTooltip:'Fund ID',\r\n                field: 'fundId',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Fund Name',\r\n                headerTooltip:'Fund Name',\r\n                field: 'fundName',\r\n                enableRowGroup: true,\r\n                tooltipField: 'fundName',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                headerTooltip:'Fund Currency',\r\n                field: 'fundCurrency',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Committed Amount',\r\n                headerTooltip:'Committed Amount',\r\n                field: 'committedAmount',\r\n                type: 'numericColumn',\r\n                tooltipField: 'committedAmount',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                //aggFunc: sumAggFunc,\r\n                enableValue: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: quantityValueFormatter,\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Commitment Date',\r\n                headerTooltip:'Commitment Date',\r\n                field: 'date',\r\n                filter: 'agDateColumnFilter',\r\n                filterParams: dateFilterParams,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'End of IP Date',\r\n                headerTooltip:'End of IP Date',\r\n                field: 'ipDate',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Transfer',\r\n                headerTooltip:'Transfer',\r\n                field: 'transfer',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.transfered ? 'x' : '';\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Tapped Out',\r\n                headerTooltip:'Tapped Out',\r\n                field: 'tappedOot',\r\n                valueGetter: (params: ValueGetterParams) => {\r\n                    return params?.data?.tappedOot ? 'Yes' : 'No'\r\n                },\r\n                minWidth: 110,\r\n                maxWidth: 130,\r\n                enableRowGroup: false,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            }\r\n        ];\r\n    }, [theme, sumAggFunc]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n        const api = params.api;\r\n        const columnApi = params.columnApi;\r\n\r\n        const calculateTotals = () => {\r\n            let total = 0;\r\n            const displayedColumns = columnApi.getAllDisplayedColumns();\r\n            displayedColumns.forEach((column) => {\r\n                if (column.getColDef().type === 'numericColumn') {\r\n                    const colId = column.getColId();\r\n                    let sum = 0;\r\n\r\n                    api.forEachNodeAfterFilterAndSort((node) => {\r\n                        const value = Number(node.data[colId]);\r\n                        if (!isNaN(value)) {\r\n                            sum += value;\r\n                        }\r\n                    });\r\n\r\n                    total = sum;\r\n                    totals[colId] = sum;\r\n                }\r\n            });\r\n            setTotals({ ...totals, Total: total });\r\n        };\r\n\r\n        calculateTotals();\r\n\r\n    };\r\n\r\n    const valueSetter = (params: ValueSetterParams, field: string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCashCalls());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        setRowData(selectedLP?.commitments ?? []);\r\n    }, [selectedLP])\r\n\r\n\r\n    const frameworkComponents: FrameworkComponentsProps = {\r\n        agColumnHeader: ({ column }) => {\r\n            const total = totals[column.getColId()];\r\n            return (\r\n                <div style={{ display: 'flex', justifyContent: total ? 'end' : 'start', flex: 1, textAlign: total ? 'right' : 'left' }}>\r\n                    {column.getColDef().headerName}\r\n                </div>\r\n            );\r\n        },\r\n    };\r\n\r\n\r\n    const statusPanelProps = useMemo(() => {\r\n        return {\r\n            statusPanel: {\r\n                statusPanelRenderer: 'aggregators',\r\n                statusPanelParams: {\r\n                    aggFuncs: ['sum'],\r\n                },\r\n            },\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n                getRowNodeId={(data) => data.id}\r\n                onGridReady={onGridReady}\r\n\r\n            /*                 frameworkComponents={frameworkComponents}\r\n                            context={{ totals }} */\r\n\r\n            /*  onGridReady={(params) => {\r\n                 setGridApi(params.api);\r\n                 if (!gridApiRef.current) {\r\n                     gridApiRef.current = params.api;\r\n                 }\r\n\r\n                 const api = params.api;\r\n                 const columnApi = params.columnApi;\r\n\r\n                 const calculateTotals = () => {\r\n                     let total = 0;\r\n                     const displayedColumns = columnApi.getAllDisplayedColumns();\r\n                     displayedColumns.forEach((column) => {\r\n                         if (column.getColDef().type === 'numericColumn') {\r\n                             const colId = column.getColId();\r\n                             let sum = 0;\r\n\r\n                             gridApiRef.current?.forEachNodeAfterFilterAndSort((node) => {\r\n                                 const value = Number(node.data[colId]);\r\n                                 if (!isNaN(value)) {\r\n                                     sum += value;\r\n                                 }\r\n                             });\r\n\r\n                             total=sum;\r\n                             totals[colId] = sum;\r\n                         }\r\n                     });\r\n                     setTotals({ ...totals, Total: total });\r\n                 };\r\n\r\n                 calculateTotals();\r\n\r\n                 api.addEventListener('rowValueChanged', calculateTotals);\r\n                 api.addEventListener('rowDataChanged', calculateTotals);\r\n                 api.addEventListener('cellValueChanged', calculateTotals);\r\n             }} */\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPCommitments;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef, ValueSetterParams } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund } from '../../../../models/lps/lpModels';\r\nimport { getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { capitalizeLetters } from '../../../../helpers/app';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingRight: '0.7em'\r\n        }\r\n    })\r\n);\r\n\r\ninterface SingleLPCoinvestmentsProps {\r\n    setGridApi: any\r\n}\r\n\r\nconst SingleLPCoinvestments = ({ setGridApi }: SingleLPCoinvestmentsProps) => {\r\n    const classes = useStyles();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<Fund[]>([]);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Short',\r\n                field: 'shortPCOName',\r\n                tooltipField: 'shortPCOName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.shortPCOName ? capitalizeLetters(params.data?.shortPCOName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: 'PCO Name',\r\n                field: 'pcoName',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoName ? capitalizeLetters(params.data?.pcoName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: '1st Co-Investment',\r\n                field: 'firstCoinvestment',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.firstCoinvestment ? params.data?.firstCoinvestment.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'firstCoinvestment'),\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Investment EUR',\r\n                field: 'investmentEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'investmentEUR',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'NAV EUR',\r\n                field: 'navEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'navEUR',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Country',\r\n                field: 'country',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Industry',\r\n                field: 'industry',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n            {\r\n                headerName: 'Stage',\r\n                field: 'stage',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params: ValueSetterParams, field: string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setRowData([]);\r\n    }, [selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{ flex: 1 }}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPCoinvestments;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent, ICellRendererParams, INumberFilterParams } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { dateValueFormatter, getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter, DefaultSideBarDef, dateFilterParams } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { fetchCashCalls } from '../../../../redux/thunks/cashCallsThunk';\r\nimport { CashCall } from '../../../../models/cashCalls/cashCallsModels';\r\nimport { amountValueFormatter, capitalizeLetters } from '../../../../helpers/app';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\ninterface SingleLPCallsTableProps {\r\n    setGridApi: any\r\n}\r\n\r\nconst SingleLPCallsTable = ({ setGridApi }: SingleLPCallsTableProps) => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const { cashCalls } = useSelector((state: RootState) => state.cashCalls);\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<CashCall[]>([]);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        statusBar: DefaultStatusPanelDef,\r\n        sideBar: DefaultSideBarDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Call ID',\r\n                headerTooltip:'Call ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary, marginLeft: 30 },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                headerTooltip:'Fund ID',\r\n                field: 'fundId',\r\n                rowGroup: true,\r\n                hide: true,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'LP ID',\r\n                headerTooltip:'Limited Partner ID',\r\n                field: 'lpId',\r\n                hide: true,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Transaction Type',\r\n                headerTooltip:'Transaction Type',\r\n                field: 'lpType',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'PCO Short Name',\r\n                headerTooltip:'Portfolio Company Short Name',\r\n                field: 'pcoShortName',\r\n                tooltipField: 'pcoShortName',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoShortName ? capitalizeLetters(params.data?.pcoShortName) : params.data?.pcoId;\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Call Date',\r\n                headerTooltip:'Call Date',\r\n                field: 'callDate',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filter: 'agDateColumnFilter',\r\n                filterParams: dateFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Due Date',\r\n                headerTooltip:'Due Date',\r\n                field: 'dueDate',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filter: 'agDateColumnFilter',\r\n                filterParams: dateFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                headerTooltip:'Amount',\r\n                field: 'amount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amount',\r\n                filter: 'agNumberColumnFilter',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                aggFunc: 'sum',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                cellRenderer: (params: ICellRendererParams) => {\r\n                    if (params?.node?.group) {\r\n                        return <span style={{ fontWeight: 600}}>{amountValueFormatter(params.value ?? 0, '')}</span>\r\n                    } else {\r\n                        return amountValueFormatter(params.value ?? 0, '');\r\n                    }\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCashCalls());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (selectedLP && selectedLP.pcos && selectedLP.pcos.length > 0 && cashCalls) {\r\n            let data = cashCalls?.filter(x => x.lpId === selectedLP.id);\r\n            data = data.map((item) => ({\r\n                ...item,\r\n                pcoShortName: selectedLP?.pcos?.filter(x => x.id?.toLowerCase() === item.pcoId?.toLowerCase())[0]?.shortName ?? ''\r\n            }))\r\n            setRowData(data ?? []);\r\n        }\r\n    }, [cashCalls, selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n                groupDisplayType={'singleColumn'}\r\n                suppressAggFuncInHeader={true}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPCallsTable;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent, ICellRendererParams, INumberFilterParams } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { dateValueFormatter, getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter, DefaultSideBarDef, dateFilterParams } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { DistributionBasic } from '../../../../models/distributions/distributionsModels';\r\nimport { fetchAllDistributions } from '../../../../redux/thunks/distributionsThunk';\r\nimport { amountValueFormatter, capitalizeLetters } from '../../../../helpers/app';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\ninterface SingleLPDistributionsTableProps {\r\n    setGridApi: any\r\n}\r\n\r\nconst SingleLPDistributionsTable = ({ setGridApi }: SingleLPDistributionsTableProps) => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const { distributions } = useSelector((state: RootState) => state.distributions);\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<DistributionBasic[]>([]);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        statusBar: DefaultStatusPanelDef,\r\n        sideBar: DefaultSideBarDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Distribution ID',\r\n                headerTooltip:'Distribution ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary, marginLeft: 30 },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                headerTooltip:'Fund ID',\r\n                field: 'fundId',\r\n                enableRowGroup: true,\r\n                rowGroup: true,\r\n                hide: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'LP ID',\r\n                headerTooltip:'Limited Partner ID',\r\n                field: 'lpId',\r\n                enableRowGroup: true,\r\n                hide: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Transaction Type',\r\n                headerTooltip:'Transaction Type',\r\n                field: 'lpType',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'PCO Short Name',\r\n                headerTooltip:'Portfolio Company Sort Name',\r\n                field: 'pcoShortName',\r\n                tooltipField: 'pcoShortName',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoShortName ? capitalizeLetters(params.data?.pcoShortName) : params.data?.pcoId;\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Notice Date',\r\n                headerTooltip:'Notice Date',\r\n                field: 'noticeDate',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filter: 'agDateColumnFilter',\r\n                filterParams: dateFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Distribution Date',\r\n                headerTooltip:'Distribution Date',\r\n                field: 'distDate',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filter: 'agDateColumnFilter',\r\n                filterParams: dateFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                headerTooltip:'Amount',\r\n                field: 'amount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amount',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                aggFunc: 'sum',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                cellRenderer: (params: ICellRendererParams) => {\r\n                    if (params?.node?.group) {\r\n                        return <span style={{ fontWeight: 600}}>{amountValueFormatter(params.value ?? 0, '')}</span>\r\n                    } else {\r\n                        return amountValueFormatter(params.value ?? 0, '');\r\n                    }\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchAllDistributions());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (selectedLP && selectedLP.pcos && selectedLP.pcos.length > 0 && distributions) {\r\n            let data = distributions?.filter(x => x.lpId === selectedLP.id);\r\n            data = data.map((item) => ({\r\n                ...item,\r\n                pcoShortName: selectedLP?.pcos?.filter(x => x.id?.toLowerCase() === item.pcoId?.toLowerCase())[0]?.shortName ?? ''\r\n            }))\r\n            setRowData(data ?? []);\r\n        }\r\n    }, [distributions, selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n                groupDisplayType={'singleColumn'}\r\n                suppressAggFuncInHeader={true}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPDistributionsTable;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Grid, Paper, ToggleButton, ToggleButtonGroup, Toolbar, Typography, useTheme } from '@mui/material';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund } from '../../../../models/lps/lpModels';\r\nimport SingleLPCallsTable from './LPCallsTable';\r\nimport SingleLPDistributionsTable from './LPDistributionsTable';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n            marginRight: '1em'\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingLeft: '0.4em',\r\n            paddingBottom: '0.5em',\r\n        },\r\n        toolbar: {\r\n            padding: 5\r\n        },\r\n    })\r\n);\r\n\r\ninterface SingleLPCallsAndDistributionsProps {\r\n    selectedCallDistView: string,\r\n    setSelecteCalDistdView: (value: string) => void,\r\n    setGridApi: any\r\n}\r\n\r\nconst SingleLPCallsAndDistributions = ({ selectedCallDistView, setSelecteCalDistdView, setGridApi }: SingleLPCallsAndDistributionsProps) => {\r\n    const classes = useStyles();\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const theme = useTheme();\r\n    const [, setRowData] = useState<Fund[]>([]);\r\n\r\n    const handleChangeVaue = (value: any) => {\r\n        setSelecteCalDistdView(value);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        setRowData(selectedLP?.funds ?? []);\r\n    }, [selectedLP])\r\n\r\n    return (\r\n        <Paper elevation={3} className={classes.root} sx={{ paddingRight: '0.5em' }}>\r\n            <Grid container\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'start',\r\n                    alignItems: 'start',\r\n                    flexDirection: 'column',\r\n                    flex: 1,\r\n                }}>\r\n                <Toolbar variant=\"dense\" disableGutters className={classes.toolbar}>\r\n                    <Grid container\r\n                        style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'flex-start',\r\n                            width: '100%'\r\n                        }}>\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <ToggleButtonGroup\r\n                                size=\"small\"\r\n                                exclusive\r\n                                sx={{ border: `1px solid ${theme.palette.primary.main}` }}\r\n                                style={{ cursor: 'pointer' }}\r\n                                value={selectedCallDistView}\r\n                                onChange={(e, value) => {\r\n                                    if (value) {\r\n                                        handleChangeVaue(value);\r\n                                    }\r\n                                }}>\r\n                                <ToggleButton value=\"Calls\" style={{\r\n                                    textTransform: 'none',\r\n                                    fontSize: 14,\r\n                                    height: 32,\r\n                                    width: 154,\r\n                                    cursor: 'pointer',\r\n                                    backgroundColor: selectedCallDistView === 'Calls' ? theme.palette.primary.main : 'transparent'\r\n\r\n                                }}>\r\n                                    <Typography style={{\r\n                                        padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                        color: selectedCallDistView === 'Calls' ? 'white' : theme.palette.primary.main\r\n                                    }}\r\n                                        variant={'body2'}> {'Calls'}</Typography>\r\n\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"Distributions\"\r\n                                    style={{\r\n                                        textTransform: 'none',\r\n                                        fontSize: 14,\r\n                                        height: 32,\r\n                                        width: 154,\r\n                                        backgroundColor: selectedCallDistView === 'Distributions' ? theme.palette.primary.main : 'transparent'\r\n                                    }}>\r\n                                    <Typography style={{\r\n                                        padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                        color: selectedCallDistView === 'Distributions' ? 'white' : theme.palette.primary.main\r\n                                    }}\r\n                                        variant={'body2'}> {'Distributions'}</Typography>\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n                {selectedCallDistView === 'Calls' ? <SingleLPCallsTable setGridApi={setGridApi}/> : <SingleLPDistributionsTable setGridApi={setGridApi} />}\r\n                {/*  <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{flex:1}}>\r\n                    <AgGridReact gridOptions={gridOptions}\r\n                                columnDefs={getColumnDefs}\r\n                                rowData={rowData}\r\n                                onGridReady={onGridReady}\r\n                                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                                loadingOverlayComponent={AGGridLoader}\r\n                                tooltipShowDelay={0}\r\n                                tooltipHideDelay={10000}\r\n                                />\r\n                </div> */}\r\n            </Grid>\r\n        </Paper>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPCallsAndDistributions;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Column, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, INumberFilterParams } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { dateValueFormatter, getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter, forexValueFormatter, prePostmoneyValueFormatter, DefaultSideBarDef, dateFilterParams } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { fetchTransactions } from '../../../../redux/thunks/transactionsThunk';\r\nimport { Transaction } from '../../../../models/transactions/transactionsModels';\r\nimport { amountValueFormatter, capitalizeLetters } from '../../../../helpers/app';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingRight: '0.7em'\r\n        }\r\n    })\r\n);\r\n\r\ninterface SingleLPTransactionsProps {\r\n    setGridApi: any\r\n}\r\n\r\nconst SingleLPTransactions = ({ setGridApi }: SingleLPTransactionsProps) => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const { transactions } = useSelector((state: RootState) => state.transactions);\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<Transaction[]>([]);\r\n    const [totals, setTotals] = useState<Record<string, number>>({});\r\n\r\n    interface FrameworkComponentsProps {\r\n        agColumnHeader: React.FC<{\r\n            column: Column;\r\n            totals: Record<string, number>;\r\n        }>;\r\n    }\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        statusBar: DefaultStatusPanelDef,\r\n        sideBar: DefaultSideBarDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Transaction ID',\r\n                headerTooltip: 'Transaction ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary, marginLeft: 30 },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Date',\r\n                headerTooltip: 'Date of Transaction',\r\n                field: 'date',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filter: 'agDateColumnFilter',\r\n                filterParams: dateFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                headerTooltip: 'Fund ID',\r\n                field: 'fundId',\r\n                rowGroup: true,\r\n                hide: true,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Investment Type',\r\n                headerTooltip: 'Invetsment Type',\r\n                field: 'investmentType',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'PCO Short Name',\r\n                headerTooltip: 'Portfolio Company Short Name',\r\n                field: 'pcoShortName',\r\n                enableRowGroup: true,\r\n                tooltipField: 'pcoShortName',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoShortName ? capitalizeLetters(params.data?.pcoShortName) : params.data?.pcoId;\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Security Type',\r\n                headerTooltip: 'Security Type',\r\n                field: 'securityType',\r\n                tooltipField: 'securityType',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Amount Fund Currency',\r\n                headerTooltip: 'Amount in Fund Currency',\r\n                headerValueGetter: (params) => { return params.colDef.headerName },\r\n                field: 'amountFundCurrency',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountFundCurrency',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                cellRenderer: (params: ICellRendererParams) => {\r\n                    if (params?.node?.group) {\r\n                        return <span style={{ fontWeight: 600 }}>{amountValueFormatter(params.value ?? 0, '')}</span>\r\n                    } else {\r\n                        return amountValueFormatter(params.value ?? 0, '');\r\n                    }\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Amount Local Currency',\r\n                headerTooltip: 'Amount in PCO Currency',\r\n                headerValueGetter: () => { return 'Amount Local Currency' },\r\n                field: 'amountLocalCurrency',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountLocalCurrency',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                cellRenderer: (params: ICellRendererParams) => {\r\n                    if (params?.node?.group) {\r\n                        return <span style={{ fontWeight: 600 }}>{amountValueFormatter(params.value ?? 0, '')}</span>\r\n                    } else {\r\n                        return amountValueFormatter(params.value ?? 0, '');\r\n                    }\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Forex NT',\r\n                headerTooltip: 'Forex NT',\r\n                field: 'forexNT',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'forexNT',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: forexValueFormatter,\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Pre Money Valuation',\r\n                headerTooltip: 'Pre Money Valuation',\r\n                field: 'preMoneyValuation',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'preMoneyValuation',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: prePostmoneyValueFormatter,\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Post Money Valuation',\r\n                headerTooltip: 'Post Money Valuation',\r\n                field: 'postMoneyValuation',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'postMoneyValuation',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: prePostmoneyValueFormatter,\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Warrant Security Type',\r\n                headerTooltip: 'Warrant Security Type',\r\n                field: 'warrantSecurityType',\r\n                enableRowGroup: true,\r\n                hide: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Warrant Strike',\r\n                headerTooltip: 'Warrant Strike',\r\n                field: 'warrantStrike',\r\n                enableRowGroup: true,\r\n                hide: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'warrantStrike',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: quantityValueFormatter,\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Due Date',\r\n                headerTooltip: 'Due Date',\r\n                field: 'dueDate',\r\n                hide: true,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n            headerName: 'Fund Id',\r\n            minWidth: 300,\r\n        };\r\n    }, []);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n        const api = params.api;\r\n        const columnApi = params.columnApi;\r\n\r\n        const calculateTotals = () => {\r\n            let total = 0;\r\n            const displayedColumns = columnApi.getAllDisplayedColumns();\r\n            displayedColumns.forEach((column) => {\r\n                if (column.getColDef().type === 'numericColumn') {\r\n                    const colId = column.getColId();\r\n                    let sum = 0;\r\n\r\n                    api.forEachNodeAfterFilterAndSort((node) => {\r\n                        const value = Number(node.data[colId]);\r\n                        if (!isNaN(value)) {\r\n                            sum += value;\r\n                        }\r\n                    });\r\n\r\n                    total = sum;\r\n                    totals[colId] = sum;\r\n                }\r\n            });\r\n            setTotals({ ...totals, Total: total });\r\n        };\r\n\r\n        calculateTotals();\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n    interface FrameworkComponentsProps {\r\n        agColumnFooter: React.FC<{\r\n            column: Column;\r\n            totals: Record<string, number>;\r\n        }>;\r\n    }\r\n\r\n    const frameworkComponents: FrameworkComponentsProps = {\r\n        agColumnHeader: ({ column }) => {\r\n            const total = totals[column.getColId()];\r\n            return (\r\n                <div style={{ display: 'flex', justifyContent: total ? 'end' : 'start', flex: 1, textAlign: total ? 'right' : 'left' }}>\r\n                    {column.getColDef().headerName}\r\n                </div>\r\n            );\r\n        },\r\n        agColumnFooter: ({ column }) => {\r\n            const total = totals[column.getColId()];\r\n            return <div style={{ fontWeight: 600 }}>Total: {total != null ? total.toFixed(2) : '-'}</div>;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTransactions());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (selectedLP && selectedLP.pcos && selectedLP.pcos.length > 0 && transactions) {\r\n            let filteredData = transactions?.filter(item => item.lpId === selectedLP.id);\r\n            filteredData = filteredData.map((item) => ({\r\n                ...item,\r\n                pcoShortName: selectedLP?.pcos?.filter(x => x.id?.toLowerCase() === item?.pcoId?.toLowerCase())[0]?.shortName ?? ''\r\n            }))\r\n            setRowData(filteredData ?? []);\r\n        }\r\n    }, [transactions, selectedLP])\r\n\r\n    return (\r\n        <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{ flex: 1 }}>\r\n            <AgGridReact gridOptions={gridOptions}\r\n                columnDefs={getColumnDefs}\r\n                rowData={rowData}\r\n                onGridReady={onGridReady}\r\n                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                loadingOverlayComponent={AGGridLoader}\r\n                tooltipShowDelay={0}\r\n                tooltipHideDelay={10000}\r\n                groupDisplayType={'singleColumn'}\r\n                autoGroupColumnDef={autoGroupColumnDef}\r\n                suppressAggFuncInHeader={true}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPTransactions;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Grid, Theme, ToggleButton, ToggleButtonGroup, Toolbar, Typography, useTheme } from '@mui/material';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund } from '../../../../models/lps/lpModels';\r\nimport ContractsTable from './ContractsTable';\r\nimport CompaniesTable from './CompaniesTable';\r\nimport ReportsTable from './ReportsTable';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingLeft: '0.4em',\r\n            paddingBottom: '0.5em',\r\n            marginLeft: '-0.1em'\r\n        },\r\n        toolbar: {\r\n            padding: 5\r\n        },\r\n    })\r\n);\r\n\r\nconst togglrBtnStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            border: 'none',\r\n            boxShadow: 'none',\r\n        },\r\n        grouped: {\r\n            '&:not(:first-child)': {\r\n                borderRadius: theme.shape.borderRadius,\r\n            },\r\n            '&:first-child': {\r\n                borderRadius: theme.shape.borderRadius,\r\n            },\r\n        }\r\n    }));\r\n\r\nconst SingleLPDocuments = () => {\r\n    const classes = useStyles();\r\n    const btnStyles = togglrBtnStyles();\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const theme = useTheme();\r\n    const [, setRowData] = useState<Fund[]>([]);\r\n    const [selectedView, setSelectedView] = useState<string>('Contracts');\r\n\r\n    const handleChangeVaue = (value: any) => {\r\n        setSelectedView(value);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        setRowData([]);\r\n    }, [selectedLP])\r\n\r\n    return (\r\n        <Grid container direction=\"column\" alignItems=\"flex-start\" justifyContent=\"flex-start\" spacing={1} sx={{ marginRight: '0.5em', marginTop: '-1.5em', overflow: 'hidden' }}>\r\n            <Grid item >\r\n                <Toolbar variant=\"dense\" disableGutters className={classes.toolbar}>\r\n                    <Grid container\r\n                        style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'flex-start',\r\n                            width: '100%'\r\n                        }}>\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <ToggleButtonGroup\r\n                                size=\"small\"\r\n                                exclusive\r\n                                style={{ cursor: 'pointer' }}\r\n                                classes={{\r\n                                    root: btnStyles.root,\r\n                                    grouped: btnStyles.grouped,\r\n                                }}\r\n                                value={selectedView}\r\n                                onChange={(e, value) => {\r\n                                    if (value) {\r\n                                        handleChangeVaue(value);\r\n                                    }\r\n                                }}>\r\n                                <ToggleButton value=\"Contracts\" sx={{\r\n                                    textTransform: 'none',\r\n                                    fontSize: 14,\r\n                                    height: 32,\r\n                                    width: 154,\r\n                                    cursor: 'pointer',\r\n                                    backgroundColor: 'transparent',\r\n                                    borderLeft: 'none',\r\n                                    borderTop: 'none',\r\n                                    borderRight: 'none',\r\n                                    borderRadius: 0,\r\n                                    borderBottom: selectedView === 'Contracts' ? `1px solid ${theme.palette.primary.main}` : 'none',\r\n                                    '&:hover': {\r\n                                        backgroundColor: selectedView === 'Contracts' ? theme.palette.grey[500] : 'none',\r\n                                    }\r\n                                }}>\r\n                                    <Typography style={{\r\n                                        padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                        color: theme.palette.primary.main\r\n                                    }}\r\n                                        variant={'body2'}> {'Contracts'}</Typography>\r\n\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"Companies\"\r\n                                    sx={{\r\n                                        textTransform: 'none',\r\n                                        fontSize: 14,\r\n                                        height: 32,\r\n                                        width: 154,\r\n                                        backgroundColor: 'transparent',\r\n                                        borderLeft: 'none',\r\n                                        borderTop: 'none',\r\n                                        borderRight: 'none',\r\n                                        borderRadius: 0,\r\n                                        borderBottom: selectedView === 'Companies' ? `1px solid ${theme.palette.primary.main}` : 'none',\r\n                                        '&:hover': {\r\n                                            backgroundColor: selectedView === 'Companies' ? theme.palette.grey[500] : 'none',\r\n                                        }\r\n                                    }}>\r\n                                    <Typography style={{\r\n                                        padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                        color: theme.palette.primary.main\r\n                                    }}\r\n                                        variant={'body2'}> {'Companies'}</Typography>\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"Reports\"\r\n                                    sx={{\r\n                                        textTransform: 'none',\r\n                                        fontSize: 14,\r\n                                        height: 32,\r\n                                        width: 154,\r\n                                        backgroundColor: 'transparent',\r\n                                        borderLeft: 'none',\r\n                                        borderTop: 'none',\r\n                                        borderRight: 'none',\r\n                                        borderRadius: 0,\r\n                                        borderBottom: selectedView === 'Reports' ? `1px solid ${theme.palette.primary.main}` : 'none',\r\n                                        '&:hover': {\r\n                                            backgroundColor: selectedView === 'Reports' ? theme.palette.grey[500] : 'none',\r\n                                        }\r\n                                    }}>\r\n                                    <Typography style={{\r\n                                        padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                        color: theme.palette.primary.main\r\n                                    }}\r\n                                        variant={'body2'}> {'Reports'}</Typography>\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ width: '100%', height: '100%', flex: 1 }}>\r\n                {selectedView === 'Contracts' ? <ContractsTable />\r\n                    : selectedView === 'Companies'\r\n                        ? <CompaniesTable />\r\n                        : <ReportsTable />}\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPDocuments;\r\n","import { Grid, useTheme } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\nimport { PCOExtended } from '../../../../models/lps/lpModels';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('highcharts/modules/exporting')(Highcharts);\r\n\r\nexport interface ChartItem extends PCOExtended {\r\n    y: number;\r\n}\r\n\r\nconst InvestmentsOverTime = () => {\r\n    const theme = useTheme();\r\n    const [totalValue, setTotalValuee] = useState<number>(0);\r\n    const [chartDataValues, setChartDataValues] = useState<Array<any>>([]);\r\n    const { transactions } = useSelector((state: RootState) => state.transactions);\r\n    const { selectedLP, pcosExtended } = useSelector((state: RootState) => state.lps);\r\n    const [type,] = React.useState('byAmount');\r\n\r\n    useEffect(() => {\r\n        if (transactions && selectedLP && pcosExtended) {\r\n            let total: number = 0;\r\n            total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n            let dataByYear = transactions.filter(x => x.lpId === selectedLP.id).sort((a, b) => new Date(a.date).getFullYear() - new Date(b.date).getFullYear()).slice()\r\n            dataByYear = dataByYear.reduce((acc: any, item: any) => {\r\n                const year = new Date(item.date).getFullYear().toString();\r\n                if (!acc[year]) {\r\n                    acc[year] = [];\r\n                }\r\n                acc[year].push(item);\r\n                return acc;\r\n            }, {});\r\n\r\n            setTotalValuee(total);\r\n            setChartDataValues(dataByYear);\r\n        }\r\n    }, [transactions, type, pcosExtended, selectedLP]);\r\n\r\n    const options = {\r\n        chart: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            plotBackgroundColor: theme.palette.background.paper,\r\n            type: 'column',\r\n            height: 500, // set the height of the chart\r\n        },\r\n        title: 'none',\r\n        xAxis: {\r\n            categories: Object.keys(chartDataValues),\r\n            title: {\r\n                text: \"Year\",\r\n            },\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: \"Amount in Euros\",\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: \"Amount\",\r\n                data: Object.values(chartDataValues).map((yearData: any) =>\r\n                    yearData.reduce((acc: any, item: any) => acc + item.amountEUR, 0)\r\n                ),\r\n                size: \"100%\",\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    format: '{point.percentage:.1f}%',\r\n                    distance: -50,\r\n                    style: {\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"12px\",\r\n                        color: \"white\",\r\n                        textOutline: \"none\",\r\n                    },\r\n                },\r\n            }\r\n        ],\r\n        colors: ['#2E41A0', '##779DD6', '#25607E', '#2667FF', '#457FD7', '#62B6CB', '#00B4D8', '#1B4357', '#86C7E3', '#56CFE1', '#64DFDF', '#5E60CE'],\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Grid container sx={{ display: 'flex', flex: 1 }}>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ paddingTop: '0.5em', paddingBottom: '0.5em' }}>\r\n                <span style={{ fontFamily: 'Raleway', fontWeight: 600 }}>Total amount: {amountValueFormatter(totalValue, '')}</span>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <HighchartsReact highcharts={Highcharts} options={options} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default React.memo(InvestmentsOverTime);\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Grid, IconButton, Paper, Typography, useTheme } from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { GridApi, GridOptions, GridReadyEvent, ICellRendererParams, INumberFilterParams, } from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport { ColDef, ColGroupDef } from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef, DefaultStatusPanelDef, quantityValueFormatter, dateFilterParams } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { amountValueFormatter, capitalizeLetters } from '../../../../helpers/app';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { fetchPCOs, fetchPCOsFinantials } from '../../../../redux/thunks/pcoThunk';\r\nimport { setPCOsExtended } from '../../../../redux/slices/lps/lpsSlice';\r\nimport PortfolioByCountry from './PortfolioByCountry';\r\nimport PortfolioByStage from './PortfolioByStage';\r\nimport PortfolioByIndustry from './PortfolioByIndustry';\r\nimport InvestmentsOverTime from './InvestmentsOverTime';\r\nimport { fetchTransactions } from '../../../../redux/thunks/transactionsThunk';\r\nimport { fetchFunds } from '../../../../redux/thunks/fundThunk';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n            marginRight: '1em'\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        },\r\n        toolbar: {\r\n            padding: 5\r\n        },\r\n    })\r\n);\r\n\r\ninterface SingleLPPortfoliosProps {\r\n    setGridApi: any\r\n}\r\n\r\nconst SingleLPPortfolios = ({ setGridApi }: SingleLPPortfoliosProps) => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const { selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const { funds } = useSelector((state: RootState) => state.funds);\r\n    const { pcos, pcosFinancials } = useSelector((state: RootState) => state.pcos);\r\n    const theme = useTheme();\r\n    const [rowData, setRowData] = useState<any[]>([]);\r\n    const [isPortfolioByCountryExpand, setIsPortfolioByCountryExpand] = useState<boolean>(false);\r\n    const [isPortfolioByStageExpand, setIsPortfolioByStageExpand] = useState<boolean>(false);\r\n    const [isPortfolioByIndustryExpand, setIsPortfolioByIndustryExpand] = useState<boolean>(false);\r\n    const [isPortfolioByInvestmentsExpand, setIsPortfolioByInvestmentExpand] = useState<boolean>(false);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        sideBar: DefaultSideBarDef,\r\n        statusBar: DefaultStatusPanelDef,\r\n        autoGroupColumnDef: {\r\n            width: 200,\r\n            headerName: 'Fund ID',\r\n            minWidth: 130,\r\n            hide: true, // set the hide property to true to hide the column\r\n        },\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Short',\r\n                headerTooltip: 'Portfolio Company Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'shortName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.shortName ? capitalizeLetters(params.data?.shortName) : '';\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                headerTooltip: 'Fund ID',\r\n                field: 'fundId',\r\n                rowGroup: true,\r\n                minWidth: 250,\r\n                hide: true,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'PCO Name',\r\n                headerTooltip: 'Portfolio Company Name',\r\n                field: 'pcoName',\r\n                tooltipField: 'pcoName',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoName ? capitalizeLetters(params.data?.pcoName) : '';\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: '1st Investment',\r\n                headerTooltip: 'Date of 1st Invetsment',\r\n                field: 'dateFirstInvestment',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filter: 'agDateColumnFilter',\r\n                filterParams: dateFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Investment EUR',\r\n                headerTooltip: 'Invested Amount in EUR',\r\n                field: 'amountInvested',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountInvested',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                aggFunc: 'sum',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                cellRenderer: (params: ICellRendererParams) => {\r\n                    if (params?.node?.group) {\r\n                        return <span style={{ fontWeight: 600 }}>{amountValueFormatter(params.value ?? 0, '')}</span>\r\n                    } else {\r\n                        return amountValueFormatter(params.value ?? 0, '');\r\n                    }\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'NAV EUR',\r\n                headerTooltip: 'Net Asset Value of Fund in EUR',\r\n                field: 'navEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'navEUR',\r\n                tooltipComponentParams: { valueType: 'number' },\r\n                filter: 'agNumberColumnFilter',\r\n                aggFunc: 'sum',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                cellRenderer: (params: ICellRendererParams) => {\r\n                    if (params?.node?.group) {\r\n                        return <span style={{ fontWeight: 600 }}>{amountValueFormatter(params.value ?? 0, '')}</span>\r\n                    } else {\r\n                        return amountValueFormatter(params.value ?? 0, '');\r\n                    }\r\n                },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Country',\r\n                headerTooltip: 'Portfolio Company Country',\r\n                field: 'country',\r\n                enableRowGroup: true,\r\n                tooltipField: 'country',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Industry 1',\r\n                headerTooltip: 'Portfolio Company Industry 1',\r\n                field: 'emeraldIndustry1',\r\n                enableRowGroup: true,\r\n                tooltipField: 'emeraldIndustry1',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Industry 2',\r\n                headerTooltip: 'Portfolio Company Industry 2',\r\n                field: 'emeraldIndustry2',\r\n                hide: true,\r\n                enableRowGroup: true,\r\n                tooltipField: 'emeraldIndustry2',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Current Stage',\r\n                headerTooltip: 'Current Stage',\r\n                field: 'currentStage',\r\n                enableRowGroup: true,\r\n                tooltipField: 'currentStage',\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Initial Stage',\r\n                headerTooltip: 'Initial Stage',\r\n                field: 'initialtStage',\r\n                tooltipField: 'initialtStage',\r\n                hide: true,\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n            {\r\n                headerName: 'Date Exit',\r\n                headerTooltip: 'Date of Exit',\r\n                field: 'dateExit',\r\n                enableRowGroup: true,\r\n                cellStyle: { fontFamily: 'Raleway', color: theme.palette.text.primary },\r\n                valueFormatter: dateValueFormatter,\r\n                filterParams: {\r\n                    buttons: ['reset'],\r\n                } as INumberFilterParams,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onGridReady = (params: GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n    const handleAccordionExp = (expanded: boolean, accordionId: string) => {\r\n        if (accordionId === 'card-countries') {\r\n            setIsPortfolioByCountryExpand(!isPortfolioByCountryExpand);\r\n        } else if (accordionId === 'card-stage') {\r\n            setIsPortfolioByStageExpand(!isPortfolioByStageExpand);\r\n        } else if (accordionId === 'card-industry') {\r\n            setIsPortfolioByIndustryExpand(!isPortfolioByIndustryExpand);\r\n        } else {\r\n            setIsPortfolioByInvestmentExpand(!isPortfolioByInvestmentsExpand);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPCOs());\r\n        dispatch(fetchFunds());\r\n        dispatch(fetchPCOsFinantials());\r\n        dispatch(fetchTransactions());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (selectedLP && pcos && pcos.length > 0 && funds && funds.length > 0 && selectedLP.pcos && selectedLP.pcos?.length > 0 && pcosFinancials?.length > 0) {\r\n            let data = selectedLP.pcos.map(pco => ({\r\n                ...pco,\r\n                pcoName: pcos.filter(x => x.id === pco.id)[0]?.pcoName ?? '',\r\n                country: pcos.filter(x => x.id === pco.id)[0]?.country ?? '',\r\n                dateFirstInvestment: pcos.filter(x => x.id === pco.id)[0]?.dateInitalInvestment ?? '',\r\n                currentStage: pcos.filter(x => x.id === pco.id)[0]?.currentStage ?? '',\r\n                initalStage: pcos.filter(x => x.id === pco.id)[0]?.initialStage ?? '',\r\n                dateExit: pcos.filter(x => x.id === pco.id)[0]?.dateExit ?? '',\r\n                emeraldIndustry1: pcos.filter(x => x.id === pco.id)[0]?.emeraldIndustry1,\r\n                emeraldIndustry2: pcos.filter(x => x.id === pco.id)[0]?.emeraldIndustry2,\r\n                navEUR: pcosFinancials.filter(x => x.pcoId === pco.id)[0]?.sumNavFundCcy ?? 0,\r\n                fundId: selectedLP?.funds?.filter((item) => pcos.filter(z => z.id === pco.id)[0]?.funds?.slice().some((subItem) => subItem?.id === item.id))[0]?.id ?? '',\r\n                fundName: selectedLP?.funds?.filter((item) => pcos.filter(z => z.id === pco.id)[0]?.funds?.slice().some((subItem) => subItem?.id === item.id))[0]?.fundName ?? '',\r\n            }\r\n            ));\r\n            setRowData(data ?? []);\r\n            dispatch(setPCOsExtended(data))\r\n        }\r\n    }, [selectedLP, pcos, pcosFinancials, funds, dispatch])\r\n\r\n    return (\r\n        <Grid container spacing={1} sx={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'flex-start', flex: 1, overflow: 'auto', height: '100%' }}>\r\n            <Grid container item xs={12} md={12} lg={8} sx={{ height: '100%', overflow: 'auto' }}>\r\n                <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n                    <AgGridReact gridOptions={gridOptions}\r\n                        columnDefs={getColumnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={onGridReady}\r\n                        loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                        loadingOverlayComponent={AGGridLoader}\r\n                        tooltipShowDelay={0}\r\n                        tooltipHideDelay={10000}\r\n                        groupDisplayType={'singleColumn'}\r\n                        suppressAggFuncInHeader={true}\r\n                    />\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={4} sx={{ height: '100%', overflow: 'auto', display: 'flex', flexDirection: 'column', flex: 1, paddingRight: '0.7em' }}>\r\n                <Paper elevation={3} key={`card-stage`} style={{ marginBottom: '1em' }}>\r\n                    <Accordion key={`card-stage`}\r\n                        expanded={isPortfolioByStageExpand}\r\n                        onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-stage')}\r\n                        sx={{\r\n                            display: 'flex',\r\n                            flex: 1,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            flexDirection: 'column'\r\n                        }}>\r\n                        <AccordionSummary\r\n                            sx={{ 'minHeight': '60px !important' }}\r\n                            expandIcon={\r\n                                <IconButton>\r\n                                    <ExpandMoreIcon\r\n                                        sx={{ pointerEvents: 'auto', cursor: 'pointer' }} />\r\n                                </IconButton>\r\n                            }>\r\n                            <Typography variant='body1' sx={{ color: theme.palette.text.primary, fontWeight: 600 }}>Portfolio by Stage</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                            width: '100%', display: 'flex', flex: 1, height: '100%', minHeight: '200px'\r\n                        }}>\r\n                            {isPortfolioByStageExpand && <PortfolioByStage />}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n                <Paper elevation={3} key={`card-countries`} style={{ marginBottom: '1em' }}>\r\n                    <Accordion key={`card-countries`}\r\n                        expanded={isPortfolioByCountryExpand}\r\n                        onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-countries')}\r\n                        sx={{\r\n                            display: 'flex',\r\n                            flex: 1,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            flexDirection: 'column'\r\n                        }}>\r\n                        <AccordionSummary\r\n                            sx={{ height: '60px' }}\r\n                            expandIcon={\r\n                                <IconButton>\r\n                                    <ExpandMoreIcon\r\n                                        sx={{ pointerEvents: 'auto', cursor: 'pointer' }} />\r\n                                </IconButton>\r\n                            }>\r\n                            <Typography variant='body1' sx={{ color: theme.palette.text.primary, fontWeight: 600 }}>Portfolio by Country</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                            width: '100%', display: 'flex', flex: 1, height: '100%', minHeight: '200px'\r\n                        }}>\r\n                            {isPortfolioByCountryExpand && <PortfolioByCountry />}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n                <Paper elevation={3} key={`card-industry`} style={{ marginBottom: '1em' }}>\r\n                    <Accordion key={`card-industry`}\r\n                        expanded={isPortfolioByIndustryExpand}\r\n                        onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-industry')}\r\n                        sx={{\r\n                            display: 'flex',\r\n                            flex: 1,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            flexDirection: 'column'\r\n                        }}>\r\n                        <AccordionSummary\r\n                            sx={{ 'minHeight': '60px !important' }}\r\n                            expandIcon={\r\n                                <IconButton>\r\n                                    <ExpandMoreIcon\r\n                                        sx={{ pointerEvents: 'auto', cursor: 'pointer' }} />\r\n                                </IconButton>\r\n                            }>\r\n                            <Typography variant='body1' sx={{ color: theme.palette.text.primary, fontWeight: 600 }}>Portfolio by Industry</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                            width: '100%', display: 'flex', flex: 1, height: '100%', minHeight: '200px'\r\n                        }}>\r\n                            {isPortfolioByIndustryExpand && <PortfolioByIndustry />}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n                <Paper elevation={3} key={`card-investments`} style={{ marginBottom: '1em' }}>\r\n                    <Accordion key={`card-investments`}\r\n                        expanded={isPortfolioByInvestmentsExpand}\r\n                        onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-investments')}\r\n                        sx={{\r\n                            display: 'flex',\r\n                            flex: 1,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            flexDirection: 'column'\r\n                        }}>\r\n                        <AccordionSummary\r\n                            sx={{ 'minHeight': '60px !important' }}\r\n                            expandIcon={\r\n                                <IconButton>\r\n                                    <ExpandMoreIcon\r\n                                        sx={{ pointerEvents: 'auto', cursor: 'pointer' }} />\r\n                                </IconButton>\r\n                            }>\r\n                            <Typography variant='body1' sx={{ color: theme.palette.text.primary, fontWeight: 600 }}>Investments Over Time</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                            width: '100%', display: 'flex', flex: 1, height: '100%', minHeight: '200px'\r\n                        }}>\r\n                            {isPortfolioByInvestmentsExpand && <InvestmentsOverTime />}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\n\r\nexport default SingleLPPortfolios;\r\n","import { Autocomplete, AutocompleteRenderInputParams, TextField } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { Theme } from \"@mui/material\";\r\nimport { createStyles, makeStyles } from '@mui/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { RootState } from '../../../redux/slices/rootSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport { LP } from '../../../models/lps/lpModels';\r\nimport { setSelectedLP } from '../../../redux/slices/lps/lpsSlice';\r\n\r\nconst autocompleteInputStyles = makeStyles((theme: Theme) => ({\r\n    autocomplete: {\r\n        'borderRadius': 5,\r\n        'backgroundColor': 'transparent',\r\n        '& input::placeholder': {\r\n            color: theme.palette.text.primary\r\n        },\r\n        '& .Mui-disabled': {\r\n            color: theme.palette.text.primary,\r\n            opacity: 0.8\r\n        }\r\n    },\r\n    textInput: {\r\n        'color': theme.palette.text.primary,\r\n        'fontWeight': 800,\r\n        'fontFamily': 'Raleway',\r\n        /* 'height': '2.5em', */\r\n        'fontSize': 10,\r\n        '& .MuiIconButton-label': {\r\n            color: theme.palette.text.primary\r\n        }\r\n    },\r\n    clearIndicator: {\r\n        color: theme.palette.text.primary\r\n    }\r\n}));\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        inputRoot: {\r\n            'borderRadius': 5,\r\n            'backgroundColor': 'transparent',\r\n            /*         '& .MuiOutlinedInput-notchedOutline': {\r\n                        borderColor: 'black'\r\n                    },*/\r\n            '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: theme.palette.primary.main\r\n            },\r\n            /*  '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                  borderColor: 'black'\r\n              }, */\r\n            '& .MuiChip-root': {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: 'transparent',\r\n                borderRadius: 5\r\n            },\r\n            '& .MuiChip-deleteIconSmall': {\r\n                color: theme.palette.text.primary\r\n            }\r\n        },\r\n        option: {\r\n            'background': theme.palette.background.paper,\r\n            '&:hover': {\r\n                color: theme.palette.primary.main,\r\n                fontWeight: 400,\r\n                fontFamily: 'Raleway'\r\n            },\r\n            '&[aria-selected=\"true\"]': {\r\n                background: theme.palette.background.paper,\r\n                color: theme.palette.primary.main,\r\n                fontWeight: 700,\r\n                fontFamily: 'Raleway'\r\n            }\r\n        },\r\n        popupIndicator: {\r\n            '&.MuiIconButton-root': {\r\n                color: theme.palette.text.primary\r\n            }\r\n        },\r\n        clearIndicator: {\r\n            color: theme.palette.text.primary\r\n        },\r\n    }),\r\n);\r\n\r\ninterface AutocompleteLPProps {\r\n    selectedLP: LP,\r\n}\r\n\r\nconst AutocompleteLPComponent = ({ selectedLP }: AutocompleteLPProps) => {\r\n    const classes = useStyles();\r\n    const autocompleteInputClasses = autocompleteInputStyles();\r\n    const dispatch = useAppDispatch();\r\n    const { lps } = useSelector((state: RootState) => state.lps);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP>(selectedLP);\r\n\r\n    const onLPChange = (event: React.SyntheticEvent, value: any) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (event.nativeEvent.type === 'focusout') return;\r\n        setSelectedLPValue(value);\r\n        if (value) {\r\n            dispatch(setSelectedLP(value));\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Autocomplete\r\n            id={'lpdAutocomplete'}\r\n            popupIcon={<ExpandMoreIcon />}\r\n            size={'small'}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            autoComplete={false}\r\n            disableClearable\r\n            classes={classes}\r\n            sx={{ marginRight: '1em', width: '320px' }}\r\n            isOptionEqualToValue={(option, value) => option === value}\r\n            onChange={(e, value: LP | null) => onLPChange(e, value)}\r\n            value={selectedLPValue ?? null}\r\n            options={lps ?? []}\r\n            getOptionLabel={(option: LP | null) => option ? option.shortName : ''}\r\n            renderInput={(params: AutocompleteRenderInputParams) => {\r\n                params.InputProps.className = autocompleteInputClasses.textInput;\r\n                return <TextField {...params}\r\n                    className={autocompleteInputClasses.autocomplete}\r\n                    variant=\"standard\"\r\n                    autoComplete=\"off\"\r\n                    type={'text'}\r\n                    label='Select a LP' />;\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AutocompleteLPComponent;","import { useState } from 'react';\r\nimport DatePicker from '../../shared/DatePicker';\r\n\r\nconst DatePickerLPComponent = () => {\r\n    const minimumDate = new Date('2019-10-01');\r\n    const maximumDate = new Date();\r\n    const [, setDate] = useState<any>(null);\r\n\r\n    /**\r\n    * Sets the start date\r\n    * @param date\r\n    */\r\n    const handleTimestampStartChange = (date: any) => {\r\n        setDate(date);\r\n    };\r\n\r\n    return (\r\n        <DatePicker disabled={false}\r\n            onChange={handleTimestampStartChange}\r\n            minDate={minimumDate}\r\n            maxDate={maximumDate}\r\n            isStartDate={false}\r\n            label={'Date'} />\r\n    );\r\n};\r\n\r\nexport default DatePickerLPComponent;","import { Button, ButtonGroup } from '@mui/material';\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../redux/slices/rootSlice';\r\n\r\ninterface SingleSelectionProps {\r\n    selectedItem: string\r\n    handleButtonClick: any\r\n}\r\n\r\nconst SelectionLPComponent = ({ selectedItem, handleButtonClick }: SingleSelectionProps) => {\r\n    const theme = useTheme();\r\n    const {\r\n        drawerOpen,\r\n    } = useSelector((state: RootState) => state.app);\r\n    /*     const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n        const orientation = isMobile ? 'vertical' : 'horizontal'; */\r\n\r\n    return (\r\n        <ButtonGroup variant=\"outlined\" aria-label=\"outlined primary button group\" sx={{ height: 36, overflow: 'auto', width: { xs: '500px', md: '100%', lg: '100%' } }}>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, sm: 8, md: drawerOpen ? 11 : 12, lg: drawerOpen ? 11 : 12 },\r\n                backgroundColor: selectedItem === 'basic' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'basic' ? 'white' : theme.palette.primary.main,\r\n            }}\r\n                onClick={() => handleButtonClick('basic')}>\r\n                Basic Information</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, sm: 8, md: drawerOpen ? 11 : 12, lg: drawerOpen ? 11 : 12 }, backgroundColor: selectedItem === 'commitments' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'commitments' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('commitments')}>\r\n                Commitments</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, sm: 8, md: drawerOpen ? 11 : 12, lg: drawerOpen ? 11 : 12 }, backgroundColor: selectedItem === 'coinvestments' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'coinvestments' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('coinvestments')}>\r\n                Co-Investments</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, sm: 8, md: drawerOpen ? 11 : 12, lg: drawerOpen ? 11 : 12 }, backgroundColor: selectedItem === 'portfolio' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'portfolio' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('portfolio')}>\r\n                Portfolio</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, sm: 8, md: drawerOpen ? 11 : 12, lg: drawerOpen ? 11 : 12 }, backgroundColor: selectedItem === 'callsDist' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'callsDist' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('callsDist')}>\r\n                Calls & Distributions</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, sm: 8, md: drawerOpen ? 11 : 12, lg: drawerOpen ? 11 : 12 }, backgroundColor: selectedItem === 'transactions' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'transactions' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('transactions')}>\r\n                Transactions</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, sm: 8, md: drawerOpen ? 11 : 12, lg: drawerOpen ? 11 : 12 }, backgroundColor: selectedItem === 'documents' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'documents' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('documents')}>\r\n                Documents</Button>\r\n        </ButtonGroup>\r\n    );\r\n};\r\n\r\nexport default SelectionLPComponent;","import { Fab, Grid, IconButton, InputAdornment, TextField } from '@mui/material';\r\nimport { useCallback, useState } from 'react';\r\nimport { Theme } from \"@mui/material\";\r\nimport { createStyles, makeStyles } from '@mui/styles';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { GridApi } from 'ag-grid-community';\r\nimport { isValueEmpty } from '../../../helpers/app';\r\nimport AddButton from '../../shared/AddButton';\r\nimport ExportButton from '../../shared/ExportButton';\r\nimport EditButton from '../../shared/EditButton';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        chart: {\r\n            flex: 1,\r\n            textAlign: 'center',\r\n            display: 'flex',\r\n            alignContent: 'center',\r\n        },\r\n        fabIcon: {\r\n            marginLeft: 10,\r\n            alignSelf: 'center',\r\n        },\r\n        searchBox: {\r\n            width: '370px',\r\n            marginRight: '1em',\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary,\r\n            fontFamily: 'Raleway',\r\n            borderRadius: 5,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface SingleSelectionProps {\r\n    selectedItem: string\r\n    handleButtonClick: any,\r\n    addEditTooltip: string,\r\n    searchTextValue: string | null,\r\n    onValueChange: (v: any) => void,\r\n    onCancelClick: (v: any) => void,\r\n}\r\n\r\nconst FiltersAndActionsLPComponent = ({\r\n    selectedItem,\r\n    handleButtonClick,\r\n    addEditTooltip,\r\n    searchTextValue,\r\n    onValueChange,\r\n    onCancelClick }: SingleSelectionProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            {selectedItem === 'basic' ? <EditButton pageName={'Edit Basic Details'} />\r\n                : <Grid container>\r\n                    <Grid item>\r\n                        <TextField\r\n                            className={classes.searchBox}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            placeholder=\"Search\"\r\n                            aria-label=\"search\"\r\n                            sx={{ marginRight: '0.5em' }}\r\n                            value={searchTextValue}\r\n                            onChange={onValueChange}\r\n                            inputProps={{\r\n                                style: { height: '1.5em' },\r\n                            }}\r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\"><SearchIcon\r\n                                    color=\"disabled\" /></InputAdornment>,\r\n                                endAdornment: isValueEmpty(searchTextValue) ? null :\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={onCancelClick}><CloseIcon fontSize='small' /></IconButton>\r\n                                    </InputAdornment>,\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item sx={{ marginRight: '0.5em' }} >\r\n                        <AddButton pageName={addEditTooltip === 'commitments'\r\n                            ? 'Add New Commitment'\r\n                            : addEditTooltip === 'lpPortfolio' ? 'Add New Portfolio'\r\n                                : addEditTooltip === 'callsComponent' ? 'Add New Call'\r\n                                    : addEditTooltip === 'distributionComponent' ? 'Add New Distribution'\r\n                                        : 'Add New Transaction'} />\r\n                    </Grid>\r\n                    {/* <Grid item sx={{ marginRight: '0.5em' }} >\r\n                        {addEditTooltip === 'lpBasic' && <EditButton pageName={addEditTooltip === 'lpBasic' ? 'Edit Basic Details' :\r\n                            addEditTooltip === 'commitments'\r\n                                ? 'Edit Commitment'\r\n                                : addEditTooltip === 'lpPortfolio' ? 'Edit Portfolio'\r\n                                    : addEditTooltip === 'callsComponent' ? 'Edit Call'\r\n                                        : addEditTooltip === 'distributionComponent' ? 'Edit Distribution'\r\n                                            : 'Edit Transaction'} />}\r\n                    </Grid> */}\r\n                    <Grid item >\r\n                        <ExportButton pageName='singleFund' />\r\n                    </Grid>\r\n                </Grid>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FiltersAndActionsLPComponent;","import { Grid } from '@mui/material';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { setTopBarTitle } from '../../../redux/slices/appSlice';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport SingleLPBasic from '../../../components/lps/single/basic/SingleLPBasicComponent';\r\nimport SingleLPCommitments from '../../../components/lps/single/commitments/SingleLPCommitmentsComponent';\r\nimport SingleLPCoinvestments from '../../../components/lps/single/coinvestments/SingleLPCoinvestments';\r\nimport SingleLPCallsAndDistributions from '../../../components/lps/single/callsAndDistributions/SingleLPCallsAndDistributions';\r\nimport SingleLPTransactions from '../../../components/lps/single/transactions/SingleLPTransactions';\r\nimport SingleLPDocuments from '../../../components/lps/single/documents/SingleLPDocuments';\r\nimport SingleLPPortfolios from '../../../components/lps/single/portfolios/SingleLPPortfoliosComponents';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../redux/slices/rootSlice';\r\nimport { setSelectedLP } from '../../../redux/slices/lps/lpsSlice';\r\nimport AutocompleteLPComponent from '../../../components/lps/single/AutocompleteLP';\r\nimport DatePickerLPComponent from '../../../components/lps/single/DatePickerLP';\r\nimport SelectionLPComponent from '../../../components/lps/single/SelectionComponentLP';\r\nimport FiltersAndActionsLPComponent from '../../../components/lps/single/FiltersAndActionsLP';\r\nimport { fetchLPs } from '../../../redux/thunks/lpThunk';\r\nimport { AddDialogComponent } from '../../../components/shared/addPopup/AddPopupDialog';\r\nimport { setSelectedFund } from '../../../redux/slices/funds/fundsSlice';\r\nimport { setSelectedPCO } from '../../../redux/slices/pcos/pcosSlice';\r\nimport { EditDialogComponent } from '../../../components/shared/editPopup/EditPopupDialog';\r\nimport { GridApi } from 'ag-grid-community';\r\nimport { DownloadDialogComponent } from '../../../components/shared/downloadPopUp/DownloadPopupDialog';\r\n\r\nconst SingleLP = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { lps, selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const [selectedView, setSelectedView] = useState<string>('basic');\r\n    const [selectedCallDistView, setSelecteCalDistdView] = useState<string>('Calls');\r\n    const [gridApi, setGridApi] = useState<GridApi | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const handleButtonClick = (buttonId: string) => {\r\n        onCancelClick();\r\n        setSelectedView(buttonId);\r\n    };\r\n\r\n    const onValueChange = useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if (gridApi) {\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    }, [gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if (gridApi) {\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    }, [gridApi]);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLPs());\r\n        dispatch(setSelectedFund(null));\r\n        dispatch(setSelectedPCO(null));\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (selectedLP) {\r\n            dispatch(setTopBarTitle(`${selectedLP.shortName} Details`));\r\n        } else {\r\n            dispatch(setSelectedLP(lps[0]));\r\n        }\r\n    }, [dispatch, selectedLP, lps])\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{ display: 'flex', flex: 1, width: '100%', height: '100%', justifyContent: 'flex-start', alignItems: 'start', flexDirection: 'row', paddingLeft: '0.5em' }}>\r\n            <Grid item xs={12} sm={12} md={12} lg={12} sx={{ flex: 1 }}>\r\n                <Grid container spacing={2} sx={{ display: 'flex', flex: 1, width: '100%', height: '100%', alignItems: 'start' }}>\r\n                    <Grid item xs={12} md={6} lg={6}>\r\n                        {selectedLP && <AutocompleteLPComponent selectedLP={selectedLP} />}\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6} lg={6} sx={{ display: 'flex', flex: 1, justifyContent: { xs: 'flex-start', md: 'flex-end', lg: 'flex-end' }, alignSelf: 'flex-end' }}>\r\n                        <DatePickerLPComponent />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={12} lg={12} sx={{ flex: 1 }}>\r\n                <Grid container spacing={2} sx={{ display: 'flex', flex: 1, width: '100%', height: '100%', alignItems: 'start', justifyContent: 'flex-start' }}>\r\n                    <Grid item xs={12} sm={12} md={8} lg={8}>\r\n                        <SelectionLPComponent selectedItem={selectedView} handleButtonClick={handleButtonClick} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={4} lg={4} sx={{ display: 'flex', flex: 1, justifyContent: { xs: 'flex-start', md: 'flex-end', lg: 'flex-end' }, alignSelf: 'flex-end' }}>\r\n                        <FiltersAndActionsLPComponent selectedItem={selectedView} handleButtonClick={handleButtonClick} addEditTooltip={selectedView === 'basic'\r\n                            ? 'lpBasic'\r\n                            : selectedView === 'commitments' ? 'commitments'\r\n                                : selectedView === 'portfolio' ? 'lpPortfolio'\r\n                                    : selectedView === 'callsDist' ? selectedCallDistView === 'Calls' ? 'callsComponent'\r\n                                        : 'distributionComponent'\r\n                                        : 'transactions'}\r\n                            searchTextValue={searchTextValue}\r\n                            onValueChange={onValueChange}\r\n                            onCancelClick={onCancelClick} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={12} lg={12} sx={{ flex: 1, height: '82%' }}>\r\n                {selectedView === 'basic' ? <SingleLPBasic />\r\n                    : selectedView === 'commitments'\r\n                        ? <SingleLPCommitments setGridApi={setGridApi} />\r\n                        : selectedView === 'coinvestments'\r\n                            ? <SingleLPCoinvestments setGridApi={setGridApi} />\r\n                            : selectedView === 'portfolio'\r\n                                ? <SingleLPPortfolios setGridApi={setGridApi} />\r\n                                : selectedView === 'callsDist'\r\n                                    ? <SingleLPCallsAndDistributions selectedCallDistView={selectedCallDistView} setSelecteCalDistdView={setSelecteCalDistdView} setGridApi={setGridApi} />\r\n                                    : selectedView === 'transactions'\r\n                                        ? <SingleLPTransactions setGridApi={setGridApi} />\r\n                                        : <SingleLPDocuments />}\r\n            </Grid>\r\n            <AddDialogComponent pageName={selectedView === 'commitments' ? 'commitments'\r\n                : selectedView === 'portfolio' ? 'lpPortfolio'\r\n                    : selectedView === 'callsDist' ? selectedCallDistView === 'Calls' ? 'callsComponent'\r\n                        : 'distributionComponent'\r\n                        : 'transactions'}\r\n                pageTitle={selectedView === 'commitments' ? 'Add New Commitment'\r\n                    : selectedView === 'portfolio' ? 'Add New Portfolio'\r\n                        : selectedView === 'callsDist' ? selectedCallDistView === 'Calls' ? 'Add New Call'\r\n                            : 'Add New Distribution'\r\n                            : 'Add New Transaction'} />\r\n\r\n            <EditDialogComponent pageName={selectedView === 'basic' ? 'lpBasic'\r\n                : selectedView === 'commitments' ? 'commitments'\r\n                    : selectedView === 'portfolio' ? 'lpPortfolio'\r\n                        : selectedView === 'callsDist' ? selectedCallDistView === 'Calls' ? 'callsComponent'\r\n                            : 'distributionComponent'\r\n                            : 'transactions'}\r\n                pageTitle={selectedView === 'basic' ? 'Edit Basic Details'\r\n                    : selectedView === 'commitments' ? 'Edit Commitment'\r\n                        : selectedView === 'portfolio' ? 'Edit Portfolio'\r\n                            : selectedView === 'callsDist' ? selectedCallDistView === 'Calls' ? 'Edit Call'\r\n                                : 'Edit Distribution'\r\n                                : 'Edit Transaction'} />\r\n            <DownloadDialogComponent pageName={selectedView === 'commitments' ? 'commitments'\r\n                    : selectedView === 'portfolio' ? 'lpPortfolio'\r\n                        : selectedView === 'callsDist' ? selectedCallDistView === 'Calls' ? 'callsComponent'\r\n                            : 'distributionComponent'\r\n                            : 'transactions'}\r\n                pageTitle={selectedView === 'commitments' ? 'Download LP Commitments'\r\n                        : selectedView === 'portfolio' ? 'Download LP Portfolio'\r\n                            : selectedView === 'callsDist' ? selectedCallDistView === 'Calls' ? 'Download LP Calls'\r\n                                : 'Download LP Distributions'\r\n                                : 'Download LP Transactions'}  />\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SingleLP;\r\n"],"names":["useStyles","makeStyles","createStyles","root","display","flex","overflow","fill","width","height","classes","isDarkTheme","useSelector","state","app","selectedLP","lps","_useState","useState","setGridApi","_slicedToArray","theme","useTheme","_useState3","_useState4","rowData","setRowData","gridOptions","defaultColDef","DefaultColumnDef","enableCellChangeFlash","enableRangeSelection","animateRows","pagination","enableCellTextSelection","groupDisplayType","statusBar","DefaultStatusPanelDef","getColumnDefs","useMemo","headerName","field","headerTooltip","enableRowGroup","valueGetter","params","_params$data","data","id","tooltipField","minWidth","maxWidth","valueSetter","cellStyle","fontFamily","color","palette","text","primary","suppressFiltersToolPanel","type","valueFormatter","quantityValueFormatter","_params$data2","_params$data3","fundCurrency","toUpperCase","value","newValue","loadingOverlayRendererParams","loadingMessage","useEffect","_selectedLP$funds","funds","_jsx","className","clsx","getGridTheme","style","children","AgGridReact","columnDefs","domLayout","onGridReady","api","loadingOverlayComponentParams","loadingOverlayComponent","AGGridLoader","tooltipShowDelay","tooltipHideDelay","paginationPageSize","percentageyValueFormatter","_selectedLP$pcos","pcos","dateValueFormatter","_selectedLP$commitmen","commitments","overflowX","_selectedLP$exits","exits","_selectedLP$commitmen2","_selectedLP$funds$len","_selectedLP$pcos$leng","_selectedLP$exits$len","_selectedLP$fees$filt","_selectedLP$totalDist","_selectedLP$totalInve","_selectedLP$fees$filt2","_selectedLP$fees$filt3","_useState2","isCommitmentsExpand","setIsCommitmentsExpand","isFundsExpand","setIsFundsExpand","_useState5","_useState6","isPCOsExpand","setIsPCOsExpand","_useState7","_useState8","isExitsExpand","setIsExitsExpand","handleAccordionExp","expanded","accordionId","_jsxs","Grid","container","spacing","sx","justifyContent","alignItems","flexDirection","paddingRight","item","xs","Paper","elevation","backgroundColor","background","paper","padding","md","lg","Typography","secondary","main","marginRight","fontWeight","country","address","href","concat","website","target","rel","firstInvestment","moment","Date","format","mainContact","relationshipPartner","relationshipSS","Accordion","onChange","event","AccordionSummary","borderBottom","mode","darken","lighten","expandIcon","IconButton","ExpandMoreIcon","pointerEvents","cursor","marginLeft","length","AccordionDetails","LPCommitmentsTable","LPFundsTable","terminated","LPPCOsTable","LPExitsTable","textAlign","alignSelf","fees","filter","x","feeType","amountValueFormatter","amount","capPaidIn","totalDistributions","totalInvestments","capAvailable","dryPowder","reserved","avgDealsAvailable","tappedOot","dateTappedOut","kpis","netDPI","grossDPI","netTVPI","grossTVPI","netIRR","toFixed","grossIRR","CustomStatusBar","props","role","lineHeight","_sumCommitted","sumCommitted","forEachNode","node","group","Number","committedAmount","sumCommittedAmount","_ref","dispatch","useAppDispatch","useRef","totals","setTotals","sideBar","DefaultSideBarDef","statusPanels","statusPanel","align","statusPanelFramework","sumAggFunc","useCallback","sum","values","forEach","filterParams","buttons","tooltipComponentParams","valueType","enableValue","dateFilterParams","transfered","_params$data4","fetchCashCalls","statusPanelRenderer","statusPanelParams","aggFuncs","getRowNodeId","columnApi","total","getAllDisplayedColumns","column","getColDef","colId","getColId","forEachNodeAfterFilterAndSort","isNaN","_objectSpread","Total","calculateTotals","shortPCOName","capitalizeLetters","pcoName","_params$data5","_params$data6","firstCoinvestment","cashCalls","rowGroup","hide","pcoShortName","pcoId","aggFunc","cellRenderer","_params$node","_params$value","_params$value2","_data","lpId","map","_selectedLP$pcos$filt","_selectedLP$pcos$filt2","_x$id","_item$pcoId","toLowerCase","shortName","suppressAggFuncInHeader","distributions","fetchAllDistributions","paddingLeft","paddingBottom","toolbar","selectedCallDistView","setSelecteCalDistdView","Toolbar","variant","disableGutters","ToggleButtonGroup","size","exclusive","border","e","handleChangeVaue","ToggleButton","textTransform","fontSize","SingleLPCallsTable","SingleLPDistributionsTable","transactions","headerValueGetter","colDef","_params$node2","_params$value3","_params$value4","forexValueFormatter","prePostmoneyValueFormatter","autoGroupColumnDef","fetchTransactions","_filteredData","filteredData","togglrBtnStyles","boxShadow","grouped","borderRadius","shape","btnStyles","selectedView","setSelectedView","direction","marginTop","borderLeft","borderTop","borderRight","grey","ContractsTable","CompaniesTable","ReportsTable","require","Highcharts","InvestmentsOverTime","totalValue","setTotalValuee","chartDataValues","setChartDataValues","_useSelector2","pcosExtended","_React$useState","React","reduce","dataPoint","amountInvested","dataByYear","sort","a","b","date","getFullYear","slice","acc","year","toString","push","options","chart","plotBackgroundColor","title","xAxis","categories","Object","keys","yAxis","series","name","yearData","amountEUR","dataLabels","enabled","distance","textOutline","colors","paddingTop","HighchartsReact","highcharts","_useSelector3","pcosFinancials","isPortfolioByCountryExpand","setIsPortfolioByCountryExpand","isPortfolioByStageExpand","setIsPortfolioByStageExpand","isPortfolioByIndustryExpand","setIsPortfolioByIndustryExpand","_useState9","_useState10","isPortfolioByInvestmentsExpand","setIsPortfolioByInvestmentExpand","fetchPCOs","fetchFunds","fetchPCOsFinantials","pco","_pcos$filter$0$pcoNam","_pcos$filter$","_pcos$filter$0$countr","_pcos$filter$2","_pcos$filter$0$dateIn","_pcos$filter$3","_pcos$filter$0$curren","_pcos$filter$4","_pcos$filter$0$initia","_pcos$filter$5","_pcos$filter$0$dateEx","_pcos$filter$6","_pcos$filter$7","_pcos$filter$8","_pcosFinancials$filte","_pcosFinancials$filte2","_selectedLP$funds$fil","_selectedLP$funds$fil2","_selectedLP$funds$fil3","_selectedLP$funds2","_selectedLP$funds2$fi","dateFirstInvestment","dateInitalInvestment","currentStage","initalStage","initialStage","dateExit","emeraldIndustry1","emeraldIndustry2","navEUR","sumNavFundCcy","fundId","_pcos$filter$9","_pcos$filter$9$funds","z","some","subItem","fundName","_pcos$filter$10","_pcos$filter$10$funds","setPCOsExtended","marginBottom","minHeight","PortfolioByStage","PortfolioByCountry","PortfolioByIndustry","autocompleteInputStyles","autocomplete","opacity","textInput","clearIndicator","inputRoot","borderColor","option","popupIndicator","autocompleteInputClasses","selectedLPValue","setSelectedLPValue","Autocomplete","popupIcon","autoHighlight","autoSelect","autoComplete","disableClearable","isOptionEqualToValue","preventDefault","stopPropagation","nativeEvent","setSelectedLP","onLPChange","getOptionLabel","renderInput","InputProps","TextField","label","minimumDate","maximumDate","setDate","DatePicker","disabled","minDate","maxDate","isStartDate","selectedItem","handleButtonClick","drawerOpen","ButtonGroup","Button","sm","onClick","alignContent","fabIcon","searchBox","addEditTooltip","searchTextValue","onValueChange","onCancelClick","_Fragment","EditButton","pageName","placeholder","inputProps","startAdornment","InputAdornment","position","SearchIcon","endAdornment","isValueEmpty","CloseIcon","AddButton","ExportButton","_useSelector","gridApi","setSearchTextValue","buttonId","setQuickFilter","fetchLPs","setSelectedFund","setSelectedPCO","setTopBarTitle","AutocompleteLPComponent","DatePickerLPComponent","SelectionLPComponent","FiltersAndActionsLPComponent","SingleLPBasic","SingleLPCommitments","SingleLPCoinvestments","SingleLPPortfolios","SingleLPCallsAndDistributions","SingleLPTransactions","SingleLPDocuments","AddDialogComponent","pageTitle","EditDialogComponent","DownloadDialogComponent"],"sourceRoot":""}