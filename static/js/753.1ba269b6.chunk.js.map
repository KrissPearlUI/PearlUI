{"version":3,"file":"static/js/753.1ba269b6.chunk.js","mappings":"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","sources":["components/lps/single/portfolios/CountryPieChart.tsx","components/lps/single/portfolios/InvestmentsOverTime.tsx","components/lps/single/portfolios/PortfolioByCountry.tsx","components/lps/single/portfolios/PortfolioByIndustry.tsx","components/lps/single/portfolios/PortfolioByStage.tsx","services/distributions/DistributionsService.ts","redux/thunks/distributionsThunk.ts"],"sourcesContent":["import { useTheme } from '@mui/material';\r\nimport React from 'react';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { PCOExtended } from '../../../../models/lps/lpModels';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('highcharts/modules/exporting')(Highcharts);\r\n\r\nexport interface ChartItem extends PCOExtended {\r\n    y: number;\r\n}\r\n\r\nconst CountryPieChart = ({ chartDataValues }: any) => {\r\n    const theme = useTheme();\r\n\r\n    interface DataPoint {\r\n        name: string;\r\n        y: number;\r\n        showInLegend?: boolean;\r\n    }\r\n\r\n\r\n    const options = {\r\n        chart: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            plotBackgroundColor: theme.palette.background.paper,\r\n            type: 'pie',\r\n            height: 500, // set the height of the chart\r\n        },\r\n        title: 'none',\r\n        series: [\r\n            {\r\n                name: 'Investment',\r\n                data: chartDataValues,\r\n                size: \"100%\",\r\n                showInLegend: true,\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    format: '{point.percentage:.1f}%',\r\n                    distance: -50,\r\n                    style: {\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"12px\",\r\n                        color: \"white\",\r\n                        textOutline: \"none\",\r\n                    },\r\n                },\r\n            }\r\n        ],\r\n        plotOptions: {\r\n            pie: {\r\n                showInLegend: true,\r\n            }\r\n        },\r\n        colors: ['#2E41A0', '##779DD6', '#25607E', '#2667FF', '#457FD7', '#62B6CB', '#00B4D8', '#1B4357', '#86C7E3', '#56CFE1', '#64DFDF', '#5E60CE'],\r\n        legend: {\r\n            enabled: true, // show the legend\r\n            align: 'center',\r\n            verticalAlign: 'bottom',\r\n            layout: 'horizontal',\r\n            labelFormatter: function (this: DataPoint): string {\r\n                return `${this.name ? this.name : 'No Data'}: ${Highcharts.numberFormat(this.y, 0, ',', ',')}`;\r\n            },\r\n            itemMarginBottom: 10,\r\n            itemMarginRight: 10,\r\n            maxHeight: 100, // set\r\n        },\r\n    };\r\n\r\n\r\n    return (\r\n        <HighchartsReact highcharts={Highcharts} options={options} containerProps={{ style: { width: '100%', height: '30em' } }} />\r\n    );\r\n};\r\n\r\nexport default React.memo(CountryPieChart);\r\n","import { Grid, useTheme } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\nimport { PCOExtended } from '../../../../models/lps/lpModels';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('highcharts/modules/exporting')(Highcharts);\r\n\r\nexport interface ChartItem extends PCOExtended {\r\n    y: number;\r\n}\r\n\r\nconst InvestmentsOverTime = () => {\r\n    const theme = useTheme();\r\n    const [totalValue, setTotalValuee] = useState<number>(0);\r\n    const [chartDataValues, setChartDataValues] = useState<Array<any>>([]);\r\n    const { transactions } = useSelector((state: RootState) => state.transactions);\r\n    const { selectedLP, pcosExtended } = useSelector((state: RootState) => state.lps);\r\n    const [type,] = React.useState('byAmount');\r\n\r\n    useEffect(() => {\r\n        if (transactions && selectedLP && pcosExtended) {\r\n            let total: number = 0;\r\n            total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n            let dataByYear = transactions.filter(x => x.lpId === selectedLP.id).sort((a, b) => new Date(a.date).getFullYear() - new Date(b.date).getFullYear()).slice()\r\n            dataByYear = dataByYear.reduce((acc: any, item: any) => {\r\n                const year = new Date(item.date).getFullYear().toString();\r\n                if (!acc[year]) {\r\n                    acc[year] = [];\r\n                }\r\n                acc[year].push(item);\r\n                return acc;\r\n            }, {});\r\n\r\n            setTotalValuee(total);\r\n            setChartDataValues(dataByYear);\r\n        }\r\n    }, [transactions, type, pcosExtended, selectedLP]);\r\n\r\n    const options = {\r\n        chart: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            plotBackgroundColor: theme.palette.background.paper,\r\n            type: 'column',\r\n            height: 500, // set the height of the chart\r\n        },\r\n        title: 'none',\r\n        xAxis: {\r\n            categories: Object.keys(chartDataValues),\r\n            title: {\r\n                text: \"Year\",\r\n            },\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: \"Amount in Euros\",\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: \"Amount\",\r\n                data: Object.values(chartDataValues).map((yearData: any) =>\r\n                    yearData.reduce((acc: any, item: any) => acc + item.amountEUR, 0)\r\n                ),\r\n                size: \"100%\",\r\n                showInLegend: true,\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    format: '{point.percentage:.1f}%',\r\n                    distance: -50,\r\n                    style: {\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"12px\",\r\n                        color: \"white\",\r\n                        textOutline: \"none\",\r\n                    },\r\n                },\r\n            }\r\n        ],\r\n        colors: ['#2E41A0', '##779DD6', '#25607E', '#2667FF', '#457FD7', '#62B6CB', '#00B4D8', '#1B4357', '#86C7E3', '#56CFE1', '#64DFDF', '#5E60CE'],\r\n        legend: {\r\n            enabled: true, // show the legend\r\n            align: 'center',\r\n            verticalAlign: 'bottom',\r\n            layout: 'horizontal',\r\n            itemMarginBottom: 10,\r\n            itemMarginRight: 10,\r\n            maxHeight: 100, // set\r\n        },\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Grid container sx={{ display: 'flex', flex: 1 }}>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ paddingTop: '0.5em', paddingBottom: '0.5em' }}>\r\n                <span style={{ fontFamily: 'Raleway', fontWeight: 600 }}>Total amount: {amountValueFormatter(totalValue, '')}</span>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <HighchartsReact highcharts={Highcharts} options={options} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default React.memo(InvestmentsOverTime);\r\n","import { FormControl, FormControlLabel, FormControlLabelProps, Grid, Radio, RadioGroup, styled } from '@mui/material';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\nimport { PCOExtended } from '../../../../models/lps/lpModels';\r\nimport CountryPieChart from './CountryPieChart';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('highcharts/modules/exporting')(Highcharts);\r\n\r\nexport interface ChartItem extends PCOExtended {\r\n    y: number;\r\n}\r\n\r\ninterface StyledFormControlLabelProps extends FormControlLabelProps {\r\n    checked: boolean;\r\n}\r\n\r\nconst StyledFormControlLabel = styled((props: StyledFormControlLabelProps) => (\r\n    <FormControlLabel {...props} />\r\n))(({ theme, checked }) => ({\r\n    fontFamily: 'Raleway',\r\n    '.MuiFormControlLabel-label': checked && {\r\n        color: theme.palette.primary.main,\r\n        fontWeight: 600\r\n    },\r\n}));\r\n\r\nconst PortfolioByCountry = () => {\r\n    const [totalValue, setTotalValuee] = useState<number>(0);\r\n    const [chartDataValues, setChartDataValues] = useState<Array<any>>([]);\r\n    const { pcosExtended } = useSelector((state: RootState) => state.lps);\r\n    const [type, setType] = React.useState('byAmount');\r\n\r\n    const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setType((event.target as HTMLInputElement).value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (pcosExtended) {\r\n            let total: number = 0;\r\n            let chartData: any[] = [];\r\n            if (type === 'byAmount') {\r\n                const groupedByCountry: { [key: string]: number } = pcosExtended.reduce(\r\n                    (acc: { [key: string]: number }, item) => {\r\n                        const { country, amountInvested } = item;\r\n                        acc[country] = (acc[country] || 0) + (amountInvested ? amountInvested : 0);\r\n                        return acc;\r\n                    },\r\n                    {}\r\n                );\r\n                total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n                chartData = Object.entries(groupedByCountry).map(([name, y]) => ({\r\n                    name,\r\n                    y,\r\n                }));\r\n            } else {\r\n                const items: PCOExtended[] = pcosExtended;\r\n                const groupedData = pcosExtended.reduce(\r\n                    (acc: { [key: string]: number }, item) => {\r\n                        const { country } = item;\r\n                        if (!acc[country]) {\r\n                            acc[country] = 1;\r\n                        } else {\r\n                            acc[country]++;\r\n                        }\r\n                        return acc;\r\n                    }, {});\r\n                total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n                chartData = Object.entries(groupedData).map(([name, y]) => ({\r\n                    name,\r\n                    y,\r\n                }));\r\n            }\r\n            setTotalValuee(total);\r\n            setChartDataValues(chartData);\r\n        }\r\n    }, [pcosExtended, type]);\r\n\r\n    return (\r\n        <Grid container sx={{ display: 'flex', flex: 1 }}>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <FormControl>\r\n                    <RadioGroup\r\n                        aria-labelledby=\"type-country-radio-btn\"\r\n                        name=\"type-country-radio-btn\"\r\n                        value={type}\r\n                        onChange={handleChangeType}\r\n                    >\r\n                        <StyledFormControlLabel checked={type === 'byAmount'} value=\"byAmount\" control={<Radio sx={{ fontFamily: 'Raleway' }} />} label=\"By amount invested\" />\r\n                        <StyledFormControlLabel checked={type === 'byPCOs'} value=\"byPCOs\" control={<Radio sx={{ fontFamily: 'Raleway' }} />} label=\"By number of PCOs\" />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ paddingTop: '0.5em', paddingBottom: '0.5em' }}>\r\n                <span style={{ fontFamily: 'Raleway', fontWeight: 600 }}>Total amount: {amountValueFormatter(totalValue, '')}</span>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <CountryPieChart chartDataValues={chartDataValues} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default React.memo(PortfolioByCountry);\r\n","import { FormControl, FormControlLabel, FormControlLabelProps, Grid, Radio, RadioGroup, styled } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\nimport { PCOExtended } from '../../../../models/lps/lpModels';\r\nimport CountryPieChart from './CountryPieChart';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('highcharts/modules/exporting')(Highcharts);\r\n\r\nexport interface ChartItem extends PCOExtended {\r\n    y: number;\r\n}\r\n\r\ninterface StyledFormControlLabelProps extends FormControlLabelProps {\r\n    checked: boolean;\r\n}\r\n\r\nconst StyledFormControlLabel = styled((props: StyledFormControlLabelProps) => (\r\n    <FormControlLabel {...props} />\r\n))(({ theme, checked }) => ({\r\n    fontFamily: 'Raleway',\r\n    '.MuiFormControlLabel-label': checked && {\r\n        color: theme.palette.primary.main,\r\n        fontWeight: 600\r\n    },\r\n}));\r\n\r\nconst PortfolioByIndustry = () => {\r\n    const [totalValue, setTotalValuee] = useState<number>(0);\r\n    const [chartDataValues, setChartDataValues] = useState<Array<any>>([]);\r\n    const { pcosExtended, selectedLP } = useSelector((state: RootState) => state.lps);\r\n    const [type, setType] = React.useState('byAmount');\r\n\r\n    const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setType((event.target as HTMLInputElement).value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (pcosExtended) {\r\n            let total: number = 0;\r\n            let chartData: any[] = [];\r\n            if (type === 'byAmount') {\r\n                const groupedByStage: { [key: string]: number } = pcosExtended.reduce(\r\n                    (acc: { [key: string]: number }, item) => {\r\n                        const { emeraldIndustry2, amountInvested } = item;\r\n                        acc[emeraldIndustry2 ?? ''] = (acc[emeraldIndustry2 ?? ''] || 0) + (amountInvested ? amountInvested : 0);\r\n                        return acc;\r\n                    },\r\n                    {}\r\n                );\r\n                total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n                chartData = Object.entries(groupedByStage).map(([name, y]) => ({\r\n                    name,\r\n                    y,\r\n                }));\r\n            } else {\r\n                const groupedByStage = pcosExtended.reduce(\r\n                    (acc: { [key: string]: number }, item) => {\r\n                        const { emeraldIndustry2 } = item;\r\n                        if (!acc[emeraldIndustry2 ?? '']) {\r\n                            acc[emeraldIndustry2 ?? ''] = 1;\r\n                        } else {\r\n                            acc[emeraldIndustry2 ?? '']++;\r\n                        }\r\n                        return acc;\r\n                    }, {});\r\n                total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n                chartData = Object.entries(groupedByStage).map(([name, y]) => ({\r\n                    name,\r\n                    y,\r\n                }));\r\n            }\r\n            setTotalValuee(total);\r\n            setChartDataValues(chartData);\r\n        }\r\n    }, [pcosExtended, type]);\r\n\r\n    return (\r\n        <Grid container sx={{ display: 'flex', flex: 1 }}>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <FormControl>\r\n                    <RadioGroup\r\n                        aria-labelledby=\"type-country-radio-btn\"\r\n                        name=\"type-country-radio-btn\"\r\n                        value={type}\r\n                        onChange={handleChangeType}\r\n                    >\r\n                        <StyledFormControlLabel checked={type === 'byAmount'} value=\"byAmount\" control={<Radio sx={{ fontFamily: 'Raleway' }} />} label=\"By amount invested\" />\r\n                        <StyledFormControlLabel checked={type === 'byPCOs'} value=\"byPCOs\" control={<Radio sx={{ fontFamily: 'Raleway' }} />} label=\"By number of PCOs\" />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ paddingTop: '0.5em', paddingBottom: '0.5em' }}>\r\n                <span style={{ fontFamily: 'Raleway', fontWeight: 600 }}>Total amount: {amountValueFormatter(totalValue, '')}</span>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <CountryPieChart chartDataValues={chartDataValues} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default React.memo(PortfolioByIndustry);\r\n","import { FormControl, FormControlLabel, FormControlLabelProps, Grid, Radio, RadioGroup, styled } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\nimport { PCOExtended } from '../../../../models/lps/lpModels';\r\nimport CountryPieChart from './CountryPieChart';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('highcharts/modules/exporting')(Highcharts);\r\n\r\nexport interface ChartItem extends PCOExtended {\r\n    y: number;\r\n}\r\n\r\ninterface StyledFormControlLabelProps extends FormControlLabelProps {\r\n    checked: boolean;\r\n}\r\n\r\nconst StyledFormControlLabel = styled((props: StyledFormControlLabelProps) => (\r\n    <FormControlLabel {...props} />\r\n))(({ theme, checked }) => ({\r\n    fontFamily: 'Raleway',\r\n    '.MuiFormControlLabel-label': checked && {\r\n        color: theme.palette.primary.main,\r\n        fontWeight: 600\r\n    },\r\n}));\r\n\r\nconst PortfolioByStage = () => {\r\n    const [totalValue, setTotalValuee] = useState<number>(0);\r\n    const [chartDataValues, setChartDataValues] = useState<Array<any>>([]);\r\n    const { pcosExtended } = useSelector((state: RootState) => state.lps);\r\n    const [type, setType] = React.useState('byAmount');\r\n\r\n    const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setType((event.target as HTMLInputElement).value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (pcosExtended) {\r\n            let total: number = 0;\r\n            let chartData: any[] = [];\r\n            if (type === 'byAmount') {\r\n                const groupedByStage: { [key: string]: number } = pcosExtended.reduce(\r\n                    (acc: { [key: string]: number }, item) => {\r\n                        const { currentStage, amountInvested } = item;\r\n                        acc[currentStage ?? ''] = (acc[currentStage ?? ''] || 0) + (amountInvested ? amountInvested : 0);\r\n                        return acc;\r\n                    },\r\n                    {}\r\n                );\r\n                total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n                chartData = Object.entries(groupedByStage).map(([name, y]) => ({\r\n                    name,\r\n                    y,\r\n                }));\r\n            } else {\r\n                const groupedByStage = pcosExtended.reduce(\r\n                    (acc: { [key: string]: number }, item) => {\r\n                        const { currentStage } = item;\r\n                        if (!acc[currentStage ?? '']) {\r\n                            acc[currentStage ?? ''] = 1;\r\n                        } else {\r\n                            acc[currentStage ?? '']++;\r\n                        }\r\n                        return acc;\r\n                    }, {});\r\n                total = pcosExtended.reduce((sum, dataPoint) => sum + (dataPoint.amountInvested ? dataPoint.amountInvested : 0), 0);\r\n                chartData = Object.entries(groupedByStage).map(([name, y]) => ({\r\n                    name,\r\n                    y,\r\n                }));\r\n            }\r\n            setTotalValuee(total);\r\n            setChartDataValues(chartData);\r\n        }\r\n    }, [pcosExtended, type]);\r\n\r\n    return (\r\n        <Grid container sx={{ display: 'flex', flex: 1 }}>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <FormControl>\r\n                    <RadioGroup\r\n                        aria-labelledby=\"type-country-radio-btn\"\r\n                        name=\"type-country-radio-btn\"\r\n                        value={type}\r\n                        onChange={handleChangeType}\r\n                    >\r\n                        <StyledFormControlLabel checked={type === 'byAmount'} value=\"byAmount\" control={<Radio sx={{ fontFamily: 'Raleway' }} />} label=\"By amount invested\" />\r\n                        <StyledFormControlLabel checked={type === 'byPCOs'} value=\"byPCOs\" control={<Radio sx={{ fontFamily: 'Raleway' }} />} label=\"By number of PCOs\" />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ paddingTop: '0.5em', paddingBottom: '0.5em' }}>\r\n                <span style={{ fontFamily: 'Raleway', fontWeight: 600 }}>Total amount: {amountValueFormatter(totalValue, '')}</span>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <CountryPieChart chartDataValues={chartDataValues} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default React.memo(PortfolioByStage);\r\n","import { DistributionBasic } from '../../models/distributions/distributionsModels';\r\nimport { RestService } from '../RestService';\r\n\r\nexport class DistributionsDataService extends RestService {\r\n    private _baseUrl = './distributions.json';\r\n\r\n    /**\r\n     * Gets the lp data that is in a json file in the public folder for now later will be a service\r\n     * @return LP[]\r\n     */\r\n    public async getAllDistributions(): Promise<DistributionBasic[]> {\r\n        return this.fetchData(this._baseUrl).then((res: any) => {\r\n            return res.data;\r\n        }).catch((err: any) => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { DistributionsDataService } from \"../../services/distributions/DistributionsService\";\r\nimport { setErrorMessage } from \"../slices/appSlice\";\r\nimport { setDistributions } from \"../slices/distributions/distributionsSlice\";\r\n\r\n/**\r\n * Fetch all distributions\r\n */\r\nexport const fetchAllDistributions: any = () => async (dispatch: any) => {\r\n    try {\r\n        const distributionsService = new DistributionsDataService();\r\n        const data = await distributionsService.getAllDistributions();\r\n        dispatch(setDistributions(data));\r\n    } catch (error: any) {\r\n        dispatch(setErrorMessage(error));\r\n    }\r\n};"],"names":["require","Highcharts","CountryPieChart","_ref","chartDataValues","theme","useTheme","options","chart","backgroundColor","palette","background","paper","plotBackgroundColor","type","height","title","series","name","data","size","showInLegend","dataLabels","enabled","format","distance","style","fontWeight","fontSize","color","textOutline","plotOptions","pie","colors","legend","align","verticalAlign","layout","labelFormatter","concat","this","y","itemMarginBottom","itemMarginRight","maxHeight","_jsx","HighchartsReact","highcharts","containerProps","width","React","InvestmentsOverTime","_useState","useState","_useState2","_slicedToArray","totalValue","setTotalValuee","_useState3","_useState4","setChartDataValues","transactions","useSelector","state","_useSelector2","lps","selectedLP","pcosExtended","_React$useState","useEffect","total","reduce","sum","dataPoint","amountInvested","dataByYear","filter","x","lpId","id","sort","a","b","Date","date","getFullYear","slice","acc","item","year","toString","push","xAxis","categories","Object","keys","text","yAxis","values","map","yearData","amountEUR","_jsxs","Grid","container","sx","display","flex","children","xs","md","lg","paddingTop","paddingBottom","fontFamily","amountValueFormatter","StyledFormControlLabel","styled","props","FormControlLabel","_objectSpread","checked","primary","main","PortfolioByCountry","_React$useState2","setType","chartData","groupedByCountry","country","entries","_ref2","_ref3","groupedData","_ref4","_ref5","FormControl","RadioGroup","value","onChange","event","target","control","Radio","label","PortfolioByIndustry","_useSelector","groupedByStage","emeraldIndustry2","PortfolioByStage","currentStage","DistributionsDataService","_RestService","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","_baseUrl","_createClass","key","_getAllDistributions","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","fetchData","then","res","catch","err","console","log","stop","RestService","fetchAllDistributions","dispatch","distributionsService","getAllDistributions","sent","setDistributions","t0","setErrorMessage","_x"],"sourceRoot":""}