{"version":3,"file":"static/js/331.8c219507.chunk.js","mappings":"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","sources":["components/funds/single/documents/SingleFundDocuments.tsx","components/funds/single/AutocompleteFund.tsx","components/funds/single/DatePickerFund.tsx","components/funds/single/SelectionComponent.tsx","components/funds/single/FiltersAndActionsFund.tsx","components/funds/single/basic/FundLpsTable.tsx","components/funds/single/basic/FundPCOsTable.tsx","components/funds/single/basic/FundCommitmentsTable.tsx","components/funds/single/basic/FundExitsTable.tsx","components/funds/single/basic/SingleFundBasic.tsx","components/funds/single/commitments/SingleFundCommitments.tsx","components/funds/single/portfolios/SingleFundPortfolios.tsx","components/funds/single/transactions/SingleFundTransactions.tsx","components/funds/single/callsAndDistributions/FundCallsTable.tsx","components/funds/single/callsAndDistributions/FundDistributionTable.tsx","components/funds/single/callsAndDistributions/SingleFundCallsAndDistributions.tsx","pages/funds/single/SingleFundPage.tsx","services/funds/FundService.ts","redux/thunks/fundThunk.ts"],"sourcesContent":["import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, Theme, ToggleButton, ToggleButtonGroup, Toolbar, Typography, useTheme,darken} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\nimport { capitalizeLetters } from '../../../../helpers/app';\r\nimport ContractsTable from '../../../lps/single/documents/ContractsTable';\r\nimport CompaniesTable from '../../../lps/single/documents/CompaniesTable';\r\nimport ReportsTable from '../../../lps/single/documents/ReportsTable';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingLeft:'0.4em',\r\n            paddingBottom:'0.5em',\r\n            marginLeft:'-0.1em'\r\n        },\r\n        toolbar: {\r\n            padding: 5\r\n        },\r\n    })\r\n);\r\n\r\nconst togglrBtnStyles = makeStyles((theme:Theme) =>\r\n    createStyles({\r\n    root: {\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n    },\r\n    grouped: {\r\n        '&:not(:first-child)': {\r\n        borderRadius: theme.shape.borderRadius,\r\n        },\r\n        '&:first-child': {\r\n        borderRadius: theme.shape.borderRadius,\r\n        },\r\n    }\r\n}));\r\n\r\nconst SingleFundDocuments = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const btnStyles=togglrBtnStyles();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {funds} = useSelector((state: RootState) => state.funds);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<Fund[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n    const [selectedView,setSelectedView]=useState<string>('Contracts');\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Short',\r\n                field: 'shortPCOName',\r\n                tooltipField: 'shortPCOName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.shortPCOName ? capitalizeLetters(params.data?.shortPCOName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: 'PCO Name',\r\n                field: 'pcoName',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoName ? capitalizeLetters(params.data?.pcoName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: '1st Co-Investment',\r\n                field:'firstCoinvestment',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.firstCoinvestment ? params.data?.firstCoinvestment.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'firstCoinvestment'),\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Investment EUR',\r\n                field: 'investmentEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'investmentEUR',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'NAV EUR',\r\n                field: 'navEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'navEUR',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Country',\r\n                field: 'country',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Industry',\r\n                field: 'industry',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Stage',\r\n                field: 'stage',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    const handleChangeVaue=(value:any)=>{\r\n        setSelectedView(value);\r\n    };\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        setRowData([]);\r\n    },[selectedLP])\r\n\r\n    return (\r\n        <Grid container direction=\"column\" alignItems=\"flex-start\" justifyContent=\"flex-start\" spacing={1} sx={{marginRight:'0.5em', marginTop:'-1.5em', overflow:'hidden'}}>\r\n        <Grid item >\r\n                    <Toolbar variant=\"dense\" disableGutters className={classes.toolbar}>\r\n                        <Grid container\r\n                            style={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'flex-start',\r\n                                width: '100%'\r\n                            }}>\r\n                            <Grid item style={{flex: 1}}>\r\n                                <ToggleButtonGroup\r\n                                    size=\"small\"\r\n                                    exclusive\r\n                                    style={{cursor: 'pointer'}}\r\n                                    classes={{\r\n                                        root: btnStyles.root,\r\n                                        grouped: btnStyles.grouped,\r\n                                      }}\r\n                                    value={selectedView}\r\n                                    onChange={(e, value) => {\r\n                                        if (value) {\r\n                                            handleChangeVaue(value);\r\n                                        }\r\n                                    }}>\r\n                                    <ToggleButton value=\"Contracts\" sx={{\r\n                                        textTransform: 'none',\r\n                                        fontSize: 14,\r\n                                        height: 32,\r\n                                        width: 154,\r\n                                        cursor: 'pointer',\r\n                                        backgroundColor: 'transparent',\r\n                                        borderLeft:'none',\r\n                                        borderTop:'none',\r\n                                        borderRight:'none',\r\n                                        borderRadius:0,\r\n                                        borderBottom: selectedView === 'Contracts' ? `1px solid ${theme.palette.primary.main}`: 'none',\r\n                                       '&:hover':{\r\n                                        backgroundColor: selectedView === 'Contracts' ? theme.palette.grey[500]: 'none',\r\n                                       }\r\n                                    }}>\r\n                                        <Typography style={{\r\n                                            padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                            color: theme.palette.primary.main \r\n                                        }}\r\n                                                    variant={'body2'}> {'Contracts'}</Typography>\r\n\r\n                                    </ToggleButton>\r\n                                    <ToggleButton value=\"Companies\"\r\n                                                sx={{\r\n                                                    textTransform: 'none',\r\n                                                    fontSize: 14,\r\n                                                    height: 32,\r\n                                                    width: 154,\r\n                                                    backgroundColor: 'transparent',\r\n                                                    borderLeft:'none',\r\n                                                    borderTop:'none',\r\n                                                    borderRight:'none',\r\n                                                    borderRadius:0,\r\n                                                    borderBottom: selectedView === 'Companies' ? `1px solid ${theme.palette.primary.main}`: 'none',\r\n                                                    '&:hover':{\r\n                                                        backgroundColor: selectedView === 'Companies' ? theme.palette.grey[500]: 'none',\r\n                                                       }\r\n                                                }}>\r\n                                        <Typography style={{\r\n                                            padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                            color: theme.palette.primary.main \r\n                                        }}\r\n                                                    variant={'body2'}> {'Companies'}</Typography>\r\n                                    </ToggleButton>\r\n                                    <ToggleButton value=\"Reports\"\r\n                                                sx={{\r\n                                                    textTransform: 'none',\r\n                                                    fontSize: 14,\r\n                                                    height: 32,\r\n                                                    width: 154,\r\n                                                    backgroundColor: 'transparent',\r\n                                                    borderLeft:'none',\r\n                                                    borderTop:'none',\r\n                                                    borderRight:'none',\r\n                                                    borderRadius:0,\r\n                                                    borderBottom: selectedView === 'Reports' ? `1px solid ${theme.palette.primary.main}`: 'none',\r\n                                                    '&:hover':{\r\n                                                        backgroundColor: selectedView === 'Reports' ? theme.palette.grey[500]: 'none',\r\n                                                       }\r\n                                                }}>\r\n                                        <Typography style={{\r\n                                            padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                            color: theme.palette.primary.main \r\n                                        }}\r\n                                                    variant={'body2'}> {'Reports'}</Typography>\r\n                                    </ToggleButton>\r\n                                </ToggleButtonGroup>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Toolbar>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={12} lg={12} sx={{width:'100%', height:'100%', flex:1}}>\r\n                    {selectedView==='Contracts' ? <ContractsTable/>\r\n                    : selectedView==='Companies'\r\n                    ? <CompaniesTable/>\r\n                    :<ReportsTable/>}\r\n                    </Grid>\r\n            </Grid>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default SingleFundDocuments;\r\n","import { Autocomplete, AutocompleteRenderInputParams, TextField } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { Theme } from \"@mui/material\";\r\nimport { createStyles, makeStyles } from '@mui/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { RootState } from '../../../redux/slices/rootSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport { FundSummary } from '../../../models/funds/fundModels';\r\nimport { setSelectedFund } from '../../../redux/slices/funds/fundsSlice';\r\n\r\nconst autocompleteInputStyles = makeStyles((theme: Theme) => ({\r\n    autocomplete: {\r\n        'borderRadius': 5,\r\n        'backgroundColor': 'transparent',\r\n        '& input::placeholder': {\r\n            color: theme.palette.text.primary\r\n        },\r\n        '& .Mui-disabled': {\r\n            color: theme.palette.text.primary,\r\n            opacity: 0.8\r\n        }\r\n    },\r\n    textInput: {\r\n        'color': theme.palette.text.primary,\r\n        'fontWeight': 800,\r\n        'fontFamily': 'Raleway',\r\n        /* 'height': '2.5em', */\r\n        'fontSize': 10,\r\n        '& .MuiIconButton-label': {\r\n            color: theme.palette.text.primary\r\n        }\r\n    },\r\n    clearIndicator: {\r\n        color: theme.palette.text.primary\r\n    }\r\n}));\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        inputRoot: {\r\n            'borderRadius': 5,\r\n            'backgroundColor': 'transparent',\r\n            /*         '& .MuiOutlinedInput-notchedOutline': {\r\n                        borderColor: 'black'\r\n                    },*/\r\n            '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: theme.palette.primary.main\r\n            },\r\n            /*  '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                  borderColor: 'black'\r\n              }, */\r\n            '& .MuiChip-root': {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: 'transparent',\r\n                borderRadius: 5\r\n            },\r\n            '& .MuiChip-deleteIconSmall': {\r\n                color: theme.palette.text.primary\r\n            }\r\n        },\r\n        option: {\r\n            'background': theme.palette.background.paper,\r\n            '&:hover': {\r\n                color: theme.palette.primary.main,\r\n                fontWeight: 400,\r\n                fontFamily: 'Raleway'\r\n            },\r\n            '&[aria-selected=\"true\"]': {\r\n                background: theme.palette.background.paper,\r\n                color: theme.palette.primary.main,\r\n                fontWeight: 700,\r\n                fontFamily: 'Raleway'\r\n            }\r\n        },\r\n        popupIndicator: {\r\n            '&.MuiIconButton-root': {\r\n                color: theme.palette.text.primary\r\n            }\r\n        },\r\n        clearIndicator: {\r\n            color: theme.palette.text.primary\r\n        },\r\n    }),\r\n);\r\n\r\ninterface AutocompleteFundProps {\r\n    selectedFund:FundSummary|null,  \r\n}\r\n\r\nconst AutocompleteFundComponent = ({selectedFund}:AutocompleteFundProps) => {\r\n    const classes = useStyles();\r\n    const autocompleteInputClasses = autocompleteInputStyles();\r\n    const dispatch = useAppDispatch();\r\n    const { funds } = useSelector((state: RootState) => state.funds);\r\n    const [selectedFundValue, setSelectedFundValue] = useState<FundSummary | null>(selectedFund);\r\n\r\n    const onFundChange = (event: FundSummary) => {\r\n        setSelectedFundValue(event);\r\n        if (event) {\r\n            dispatch(setSelectedFund(event));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Autocomplete\r\n            id={'fundsAutocomplete'}\r\n            popupIcon={<ExpandMoreIcon />}\r\n            size={'small'}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            autoComplete={false}\r\n            disableClearable\r\n            classes={classes}\r\n            sx={{ marginRight: '1em', width: '320px' }}\r\n            isOptionEqualToValue={(option, value) => option === value}\r\n            onChange={(e, value: FundSummary) => onFundChange(value)}\r\n            value={selectedFundValue ?? funds[0]}\r\n            options={funds ?? []}\r\n            getOptionLabel={(option: FundSummary) => option ? option.shortName : ''}\r\n            renderInput={(params: AutocompleteRenderInputParams) => {\r\n                params.InputProps.className = autocompleteInputClasses.textInput;\r\n                return <TextField {...params}\r\n                    className={autocompleteInputClasses.autocomplete}\r\n                    variant=\"standard\"\r\n                    autoComplete=\"off\"\r\n                    type={'text'}\r\n                    label='Select a Fund' />;\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AutocompleteFundComponent;","import { useState } from 'react';\r\nimport DatePicker from '../../shared/DatePicker';\r\n\r\nconst DatePickerFundComponent = () => {\r\n    const minimumDate = new Date('2019-10-01');\r\n    const maximumDate = new Date();\r\n    const [date, setDate] = useState<any>(null);\r\n\r\n    /**\r\n    * Sets the start date\r\n    * @param date\r\n    */\r\n    const handleTimestampStartChange = (date: any) => {\r\n        setDate(date);\r\n    };\r\n\r\n    return (\r\n        <DatePicker disabled={false}\r\n            onChange={handleTimestampStartChange}\r\n            minDate={minimumDate}\r\n            maxDate={maximumDate}\r\n            isStartDate={false}\r\n            label={'Date'} />\r\n    );\r\n};\r\n\r\nexport default DatePickerFundComponent;","import { Button, ButtonGroup } from '@mui/material';\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\ninterface SingleSelectionProps {\r\n    selectedItem: string\r\n    handleButtonClick: any\r\n}\r\n\r\nconst SelectionFundComponent = ({ selectedItem, handleButtonClick }: SingleSelectionProps) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <ButtonGroup variant=\"outlined\" aria-label=\"outlined primary button group\" sx={{ height: 36,overflow: 'auto', width: {xs:'500px', md:'100%', lg:'100%'} }}>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, md: 12, lg: 12 },\r\n                backgroundColor: selectedItem === 'basic' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'basic' ? 'white' : theme.palette.primary.main\r\n            }}\r\n                onClick={() => handleButtonClick('basic')}>\r\n                Basic Information</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, md: 12, lg: 12 }, backgroundColor: selectedItem === 'commitments' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'commitments' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('commitments')}>\r\n                Commitments</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, md: 12, lg: 12 }, backgroundColor: selectedItem === 'portfolio' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'portfolio' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('portfolio')}>\r\n                Portfolio</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, md: 12, lg: 12 }, backgroundColor: selectedItem === 'callsDist' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'callsDist' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('callsDist')}>\r\n                Calls & Distributions</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, md: 12, lg: 12 }, backgroundColor: selectedItem === 'transactions' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'transactions' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('transactions')}>\r\n                Transactions</Button>\r\n            <Button sx={{\r\n                fontSize: { xs: 8, md: 12, lg: 12 }, backgroundColor: selectedItem === 'documents' ? theme.palette.primary.main : theme.palette.background.paper,\r\n                color: selectedItem === 'documents' ? 'white' : theme.palette.primary.main\r\n            }} onClick={() => handleButtonClick('documents')}>\r\n                Documents</Button>\r\n        </ButtonGroup>\r\n    );\r\n};\r\n\r\nexport default SelectionFundComponent;","import { Fab, Grid, IconButton, InputAdornment, TextField } from '@mui/material';\r\nimport { useCallback, useState } from 'react';\r\nimport { Theme } from \"@mui/material\";\r\nimport { createStyles, makeStyles } from '@mui/styles';\r\nimport EditRoundedIcon from '@mui/icons-material/EditRounded';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { GridApi } from 'ag-grid-community';\r\nimport { isValueEmpty } from '../../../helpers/app';\r\nimport AddButton from '../../shared/AddButton';\r\nimport ExportButton from '../../shared/ExportButton';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        chart: {\r\n            flex: 1,\r\n            textAlign: 'center',\r\n            display: 'flex',\r\n            alignContent: 'center',\r\n        },\r\n        fabIcon: {\r\n            marginLeft: 10,\r\n            alignSelf: 'center',\r\n        },\r\n        searchBox: {\r\n            width: '320px',\r\n            marginRight: '1em',\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary,\r\n            fontFamily: 'Raleway',\r\n            borderRadius: 5,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface SingleSelectionProps {\r\n    selectedItem: string\r\n    handleButtonClick: any\r\n}\r\n\r\nconst FiltersAndActionsFundComponent = ({ selectedItem, handleButtonClick }: SingleSelectionProps) => {\r\n    const classes = useStyles();\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n\r\n    const onValueChange = useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if (gridApi) {\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    }, [gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if (gridApi) {\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    }, [gridApi]);\r\n\r\n    return (\r\n        <>\r\n            {selectedItem === 'basic' ? <Fab\r\n                color={'primary'}\r\n                size=\"small\"\r\n                sx={{ boxShadow: 'none', alignSelf: 'end' }}\r\n                aria-label=\"editBtn\"\r\n                onFocus={(e: any) => (e.target.blur())}\r\n                className={classes.fabIcon}>\r\n                <EditRoundedIcon />\r\n            </Fab>\r\n                : <Grid container>\r\n                    <Grid item>\r\n                        <TextField\r\n                            className={classes.searchBox}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            placeholder=\"Search\"\r\n                            aria-label=\"search\"\r\n                            sx={{ marginRight: '0.5em' }}\r\n                            value={searchTextValue}\r\n                            onChange={onValueChange}\r\n                            inputProps={{\r\n                                style: { height: '1.5em' },\r\n                            }}\r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\"><SearchIcon\r\n                                    color=\"disabled\" /></InputAdornment>,\r\n                                endAdornment: isValueEmpty(searchTextValue) ? null :\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={onCancelClick}><CloseIcon fontSize='small' /></IconButton>\r\n                                    </InputAdornment>,\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item sx={{ marginRight: '0.5em' }} >\r\n                        <AddButton pageName='singleFund' />\r\n                    </Grid>\r\n                    <Grid item sx={{ marginRight: '0.5em' }} >\r\n                        <Fab\r\n                            color={'primary'}\r\n                            size=\"small\"\r\n                            sx={{ boxShadow: 'none', alignSelf: 'end' }}\r\n                            aria-label=\"editBtn\"\r\n                            onFocus={(e: any) => (e.target.blur())}\r\n                            className={classes.fabIcon}>\r\n                            <EditRoundedIcon />\r\n                        </Fab>\r\n                    </Grid>\r\n                    <Grid item >\r\n                        <ExportButton pageName='singleFund' />\r\n                    </Grid>\r\n                </Grid>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FiltersAndActionsFundComponent;","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund, LP, LPFundsOverview } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst FundLPsTable = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {selectedFund} = useSelector((state: RootState) => state.funds);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<LPFundsOverview[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Id',\r\n                field: 'id',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.id;\r\n                },\r\n                tooltipField: 'id',\r\n                valueSetter: (params) => valueSetter(params, 'id'),\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'shortName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Committed Amount',\r\n                field: 'committedAmount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'committedAmount',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field:'fundCurrency',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        setRowData(selectedFund?.lps??[]);\r\n    },[selectedFund])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{flex:1}}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            domLayout={'autoHeight'}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default FundLPsTable;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst FundPCOsTable = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {selectedFund} = useSelector((state: RootState) => state.funds);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<PCO[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'fundName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Amount Invested',\r\n                field: 'amountInvested',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountInvested',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        setRowData(selectedFund?.pcos??[]);\r\n    },[selectedFund])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{flex:1}}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            domLayout={'autoHeight'}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default FundPCOsTable;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { CommitmentBasic, LP } from '../../../../models/lps/lpModels';\r\nimport { dateValueFormatter, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst FundCommitmentsTable = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {funds} = useSelector((state: RootState) => state.funds);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<CommitmentBasic[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Date',\r\n                field: 'date',\r\n                minWidth: 100,\r\n                maxWidth:150,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            }, \r\n            {\r\n                headerName: 'Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'shortName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Committed Amount',\r\n                field: 'committedAmount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'committedAmount',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field:'fundCurrency',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        setRowData(selectedLP?.commitments??[]);\r\n    },[selectedLP])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{flex:1}}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            domLayout={'autoHeight'}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default FundCommitmentsTable;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { CommitmentBasic, Exits, Fund, LP } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst FundExitsTable = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {funds} = useSelector((state: RootState) => state.funds);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<Exits[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Date',\r\n                field: 'date',\r\n                minWidth: 100,\r\n                maxWidth:150,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            }, \r\n            {\r\n                headerName: 'Short Name',\r\n                field: 'shortName',\r\n                tooltipField: 'shortName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Amount Returned',\r\n                field: 'amountGained',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountGained',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field:'fundCurrency',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        setRowData(selectedLP?.exits??[]);\r\n    },[selectedLP])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{flex:1}}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            domLayout={'autoHeight'}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default FundExitsTable;\r\n","import {Accordion, AccordionDetails, AccordionSummary, Autocomplete, AutocompleteRenderInputParams, Grid,IconButton,Paper,TextField,Typography} from '@mui/material';\r\nimport {darken, lighten, useTheme} from \"@mui/material/styles\";\r\nimport { useEffect, useState } from 'react';\r\nimport { setTopBarTitle } from '../../../../redux/slices/appSlice';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport {Theme} from \"@mui/material\";\r\nimport {createStyles,makeStyles} from '@mui/styles';\r\nimport LPChartComponent from '../../../landing/LPChart';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport FundLpsTable from './FundLpsTable';\r\nimport FundPCOsTable from './FundPCOsTable';\r\nimport FundCommitmentsTable from './FundCommitmentsTable';\r\nimport moment from 'moment';\r\nimport FundExitsTable from './FundExitsTable';\r\nimport { amountValueFormatter } from '../../../../helpers/app';\r\n\r\nconst autocompleteInputStyles = makeStyles((theme: Theme) => ({\r\n    autocomplete: {\r\n        'borderRadius': 5,\r\n        'backgroundColor': 'transparent',\r\n        '& input::placeholder': {\r\n            color: theme.palette.text.primary\r\n        },\r\n        '& .Mui-disabled': {\r\n            color: theme.palette.text.primary,\r\n            opacity: 0.8\r\n        }\r\n    },\r\n    textInput: {\r\n        'color': theme.palette.text.primary,\r\n        'fontWeight': 800,\r\n        'fontFamily': 'Raleway',\r\n        /* 'height': '2.5em', */\r\n        'fontSize': 10,\r\n        '& .MuiIconButton-label': {\r\n            color: theme.palette.text.primary\r\n        }\r\n    },\r\n    clearIndicator: {\r\n        color: theme.palette.text.primary\r\n    }\r\n}));\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        chart: {\r\n            flex: 1,\r\n            textAlign: 'center',\r\n            display: 'flex',\r\n            alignContent: 'center',\r\n        },\r\n        summary: {\r\n            flex:1\r\n        },\r\n        inputRoot: {\r\n            'borderRadius': 5,\r\n            'backgroundColor': 'transparent',\r\n    /*         '& .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: 'black'\r\n            },*/\r\n            '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: theme.palette.primary.main\r\n            },\r\n          /*  '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: 'black'\r\n            }, */\r\n            '& .MuiChip-root': {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: 'transparent',\r\n                borderRadius: 5\r\n            },\r\n            '& .MuiChip-deleteIconSmall': {\r\n                color: theme.palette.text.primary\r\n            }\r\n        },\r\n        option: {\r\n            'background': theme.palette.background.paper,\r\n            '&:hover': {\r\n                color: theme.palette.primary.main,\r\n                fontWeight: 400,\r\n                fontFamily: 'Raleway'\r\n            },\r\n            '&[aria-selected=\"true\"]': {\r\n                background: theme.palette.background.paper,\r\n                color: theme.palette.primary.main,\r\n                fontWeight: 700,\r\n                fontFamily: 'Raleway'\r\n            }\r\n        },\r\n        popupIndicator: {\r\n            '&.MuiIconButton-root': {\r\n                color: theme.palette.text.primary\r\n            }\r\n        },\r\n        clearIndicator: {\r\n            color: theme.palette.text.primary\r\n        },\r\n    }),\r\n);\r\n\r\nconst SingleFundBasic = () => {\r\n    const classes=useStyles();\r\n    const theme=useTheme();\r\n    const autocompleteInputClasses=autocompleteInputStyles();\r\n    const dispatch = useAppDispatch();\r\n    const {selectedFund} = useSelector((state: RootState) => state.funds);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<any>(null);\r\n    const [isCommitmentsExpand, setIsCommitmentsExpand]=useState<boolean>(false);\r\n    const [isFundsExpand, setIsFundsExpand]=useState<boolean>(false); \r\n    const [isPCOsExpand, setIsPCOsExpand]=useState<boolean>(false);\r\n    const [isExitsExpand, setIsExitsExpand]=useState<boolean>(false);\r\n\r\n    const onLPChange = (event: any) => {\r\n        setSelectedLPValue(event);\r\n    };\r\n\r\n    const handleAccordionExp=(expanded: boolean, accordionId: string)=> {\r\n        if(accordionId==='card-commitments'){\r\n            setIsCommitmentsExpand(!isCommitmentsExpand);\r\n        } else if(accordionId==='card-lps'){\r\n            setIsFundsExpand(!isFundsExpand);\r\n        } else if(accordionId==='card-pcos'){\r\n            setIsPCOsExpand(!isPCOsExpand);\r\n        } else{\r\n            setIsExitsExpand(!isExitsExpand);\r\n        }\r\n    };\r\n\r\n    const calculateForInvestments=(totalCommitments:number,managementFee:number,setUpFee:number,other:number, fundCurrency:string)=>{\r\n        const investments:number=totalCommitments-(managementFee+setUpFee+other)\r\n\r\n        return investments<=0?'': `${amountValueFormatter(investments,'')} ${fundCurrency}`;\r\n    };\r\n\r\n    const calculateUnrealized=(totalInvestments:number,totalRealized:number, fundCurrency:string)=>{\r\n        const unrealized:number=Math.abs(totalInvestments-totalRealized);\r\n\r\n        return unrealized<=0?'': `${amountValueFormatter(unrealized,'')} ${fundCurrency}`;\r\n    };\r\n\r\n    const calculateDistributed=(recycleReserves:number,nonRecycleReserves:number, fundCurrency:string)=>{\r\n        const distributed:number=recycleReserves + nonRecycleReserves;\r\n\r\n        return distributed<=0?'': `${amountValueFormatter(distributed,'')} ${fundCurrency}`;\r\n    };\r\n\r\n    const calculateCarriedInterest=(escrow:number,realised:number, fundCurrency:string)=>{\r\n        const carriedInterest:number=escrow + realised;\r\n\r\n        return carriedInterest<=0?'': `${amountValueFormatter(carriedInterest,'')} ${fundCurrency}`;\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{display:'flex',flex:1, justifyContent:'flex-start', alignItems:'flex-start', flexDirection:'row',paddingRight:'0.5em', overflow:'auto', paddingBottom:'1em'}}>\r\n            <Grid item xs={12}>\r\n                <Paper elevation={3} sx={{backgroundColor:theme.palette.background.paper, padding:'1em'}}>\r\n                    <Grid container spacing={1} sx={{display:'flex', justifyContent:'space-between', alignItems:'flex-start', flexDirection:'row'}}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Domicile:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.country}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400}}>Address:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary,fontWeight:500}}>{selectedFund?.address}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Investment Comittee:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary,fontWeight:500}}>{selectedFund?.investmentComitee}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                        <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>First Closing Date:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.vintage ? moment(new Date(selectedFund?.vintage)).format('DD MMM YYYY'):''}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Final Closing Date:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.finalClosingDate ? moment(new Date(selectedFund?.finalClosingDate)).format('DD MMM YYYY'):''}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Currency:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.currency}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                        <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Type:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.type}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>AIFM:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.aifm ??'N/A'}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>AIFM Contact:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.aifmContact ??'N/A'}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sx={{flex:1}}>\r\n                <Paper elevation={3} sx={{backgroundColor:theme.palette.background.paper, padding:'1em'}}>\r\n                <Grid container spacing={1} sx={{display:'flex', justifyContent:'space-between', alignItems:'flex-start', flexDirection:'row'}}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column',flex:1}}>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Accordion\r\n                            elevation={0}\r\n                                key={`card-commitments`}\r\n                                expanded={isCommitmentsExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-commitments')}\r\n                                sx={{backgroundColor:'transparent'}}\r\n                                /* sx={{\r\n                                    'marginBottom': '0.5em',\r\n                                    'width': '100%',\r\n                                    'flexDirection': 'column',\r\n                                    'borderRadius': 5,\r\n                                    'backgroundColor': theme.palette.background.paper,\r\n                                    \r\n                                }} */\r\n                            >\r\n                                <AccordionSummary\r\n                                sx={{display: 'flex', \r\n                                alignItems: 'center', \r\n                                justifyContent:'flex-start', \r\n                                width:'340px', \r\n                                borderBottom:`1px solid ${theme.palette.mode==='dark'?darken(theme.palette.text.primary,0.6) : lighten(theme.palette.text.primary,0.7)}`,\r\n                                '&:hover':{\r\n                                    borderBottom:`1px solid ${theme.palette.text.primary}` ,\r\n                                },\r\n                                '& .Mui-expanded': {\r\n                                    borderBottom: 'none',\r\n                                }}} \r\n                                    /* sx={{\r\n                                        'cursor': 'pointer',\r\n                                        'width': '100%',\r\n                                        'minHeight': '68px !important',\r\n                                        'paddingTop': 0,\r\n                                        'backgroundColor': theme.palette.background.paper,\r\n                                    \r\n                                    }} */\r\n                                    expandIcon={\r\n                                            <IconButton >\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{pointerEvents: 'auto', cursor: 'pointer',\r\n                                                    '&:hover':{\r\n                                                        color:theme.palette.text.primary,\r\n                                                    }}}/>\r\n                                            </IconButton>\r\n                                    }\r\n                                >\r\n                                    <Grid container spacing={2}\r\n                                    >\r\n                                        <Grid item sx={{marginLeft:'-1em'}}>\r\n                                            <Typography sx={{color:theme.palette.secondary.main, fontWeight:400}}>Number of Commitments:</Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                                {selectedFund?.numOfLPs ??0}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                {isCommitmentsExpand&& selectedFund?.lps && <AccordionDetails\r\n                                    sx={{\r\n                                        backgroundColor: theme.palette.background.paper,\r\n                                        width: '100%', padding: '0.1em', display: 'flex', height: '100%', pointerEvents: 'auto'\r\n                                    }}>\r\n                                    <FundCommitmentsTable/>\r\n                                </AccordionDetails>}\r\n                            </Accordion>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex',flex:1}}>\r\n                            <Accordion\r\n                            elevation={0}\r\n                                key={`card-lps`}\r\n                                expanded={isFundsExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-lps')}\r\n                                sx={{backgroundColor:'transparent'}}\r\n                                /* sx={{\r\n                                    'marginBottom': '0.5em',\r\n                                    'width': '100%',\r\n                                    'flexDirection': 'column',\r\n                                    'borderRadius': 5,\r\n                                    'backgroundColor': theme.palette.background.paper,\r\n                                    \r\n                                }} */\r\n                            >\r\n                                <AccordionSummary\r\n                                sx={{display: 'flex', \r\n                                alignItems: 'center', \r\n                                justifyContent:'flex-start', \r\n                                width:'340px', \r\n                                borderBottom:`1px solid ${theme.palette.mode==='dark'?darken(theme.palette.text.primary,0.6) : lighten(theme.palette.text.primary,0.7)}`,\r\n                                '&:hover':{\r\n                                    borderBottom:`1px solid ${theme.palette.text.primary}` ,\r\n                                },\r\n                            '& .Mui-expanded': {\r\n                                    borderBottom: 'none',\r\n                                }}}\r\n                                    /* sx={{\r\n                                        'cursor': 'pointer',\r\n                                        'width': '100%',\r\n                                        'minHeight': '68px !important',\r\n                                        'paddingTop': 0,\r\n                                        'backgroundColor': theme.palette.background.paper,\r\n                                    \r\n                                    }} */\r\n                                    expandIcon={\r\n                                            <IconButton>\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{pointerEvents: 'auto', cursor: 'pointer',\r\n                                                    '&:hover':{\r\n                                                        color:theme.palette.text.primary,\r\n                                                    }}}/>\r\n                                            </IconButton>\r\n                                    }\r\n                                >\r\n                                    <Grid container spacing={2}\r\n                                    >\r\n                                        <Grid item sx={{marginLeft:'-1em'}}>\r\n                                            <Typography sx={{color:theme.palette.secondary.main, fontWeight:400}}>Number of LPs:</Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                                {selectedFund?.numOfLPs ??0}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                {isFundsExpand&& selectedFund?.lps && <AccordionDetails\r\n                                    sx={{\r\n                                        backgroundColor: theme.palette.background.paper,\r\n                                        display: 'flex', height: '100%', pointerEvents: 'auto',flex:1,marginLeft:'-1em', width:'380px'\r\n                                    }}>\r\n                                <FundLpsTable/>\r\n                                </AccordionDetails>}\r\n                            </Accordion>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                        <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Of which terminated:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.terminated ? selectedFund.terminated.length:0}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                        <Grid item sx={{display:'flex'}}>\r\n                        <Accordion\r\n                            elevation={0}\r\n                                key={`card-pcos`}\r\n                                expanded={isPCOsExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-pcos')}\r\n                                sx={{backgroundColor:'transparent'}}\r\n                            \r\n                            >\r\n                                <AccordionSummary\r\n                                sx={{display: 'flex', \r\n                                alignItems: 'center', \r\n                                justifyContent:'flex-start', \r\n                                width:'340px', \r\n                                borderBottom:`1px solid ${theme.palette.mode==='dark'?darken(theme.palette.text.primary,0.6) : lighten(theme.palette.text.primary,0.7)}`,\r\n                                '&:hover':{\r\n                                    borderBottom:`1px solid ${theme.palette.text.primary}` ,\r\n                                },\r\n                            '& .Mui-expanded': {\r\n                                    borderBottom: 'none',\r\n                                }}}\r\n                                    \r\n                                    expandIcon={\r\n                                            <IconButton>\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{pointerEvents: 'auto', cursor: 'pointer',\r\n                                                    '&:hover':{\r\n                                                        color:theme.palette.text.primary,\r\n                                                    }}}/>\r\n                                            </IconButton>\r\n                                    }\r\n                                >\r\n                                    <Grid container spacing={2}\r\n                                    >\r\n                                        <Grid item sx={{marginLeft:'-1em'}}>\r\n                                            <Typography sx={{color:theme.palette.secondary.main, fontWeight:400}}>Number of PCOs:</Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                                {selectedFund?.numOFPCOs ?? 0}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                {isPCOsExpand&& selectedFund?.pcos && <AccordionDetails\r\n                                    sx={{\r\n                                        backgroundColor: theme.palette.background.paper,\r\n                                        width: '100%', padding: '0.1em', display: 'flex', height: '100%', pointerEvents: 'auto'\r\n                                    }}>\r\n                                <FundPCOsTable/>\r\n                                </AccordionDetails>}\r\n                            </Accordion>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Accordion\r\n                            elevation={0}\r\n                                key={`card-exits`}\r\n                                expanded={isExitsExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-exits')}\r\n                                sx={{backgroundColor:'transparent'}}\r\n                            \r\n                            >\r\n                                <AccordionSummary\r\n                                sx={{display: 'flex', \r\n                                alignItems: 'center', \r\n                                justifyContent:'flex-start', \r\n                                width:'340px', \r\n                                borderBottom:`1px solid ${theme.palette.mode==='dark'?darken(theme.palette.text.primary,0.6) : lighten(theme.palette.text.primary,0.7)}`,\r\n                                '&:hover':{\r\n                                    borderBottom:`1px solid ${theme.palette.text.primary}` ,\r\n                                },\r\n                            '& .Mui-expanded': {\r\n                                    borderBottom: 'none',\r\n                                }}}\r\n                                    \r\n                                    expandIcon={\r\n                                            <IconButton>\r\n                                                <ExpandMoreIcon\r\n                                                    sx={{pointerEvents: 'auto', cursor: 'pointer',\r\n                                                    '&:hover':{\r\n                                                        color:theme.palette.text.primary,\r\n                                                    }}}/>\r\n                                            </IconButton>\r\n                                    }\r\n                                >\r\n                                    <Grid container spacing={2}\r\n                                    >\r\n                                        <Grid item sx={{marginLeft:'-1em'}}>\r\n                                            <Typography sx={{color:theme.palette.secondary.main, fontWeight:400}}>Number of Exits:</Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                                {selectedFund?.exits?.length??0}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                {isExitsExpand&& selectedFund?.exits && <AccordionDetails\r\n                                    sx={{\r\n                                        backgroundColor: theme.palette.background.paper,\r\n                                        width: '100%', padding: '0.1em', display: 'flex', height: '100%', pointerEvents: 'auto'\r\n                                    }}>\r\n                                    <FundExitsTable/>\r\n                                </AccordionDetails>}\r\n                            </Accordion>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper elevation={3} sx={{backgroundColor:theme.palette.background.paper,padding:'1em'}}>\r\n                <Grid container spacing={3} sx={{display:'flex', justifyContent:'flex-start', alignItems:'flex-start', flexDirection:'row'}}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                            <Grid item sx={{display:'flex', justifyContent:'space-between', width:'280px'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Currency:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500, textAlign:'right', alignSelf:'end'}}>\r\n                                {selectedFund?.currency??''}\r\n                            </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex',justifyContent:'space-between', width:'280px'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400}}>Committed Capital:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary,fontWeight:500,textAlign:'right'}}>{amountValueFormatter(selectedFund?.sumCommittedAmountFundCcy??0,'')}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex',justifyContent:'space-between', width:'280px'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Base Capital:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary,fontWeight:500,textAlign:'right'}}>{amountValueFormatter(selectedFund?.sumBaseAmountFundCccy??0,'')}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                        <Grid item sx={{display:'flex', justifyContent:'space-between',width:'280px'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Currency:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                            {selectedFund?.currency??''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex',justifyContent:'space-between',width:'280px'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Of which terminated:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>{selectedFund?.terminatedCommitedCapital}</Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex',justifyContent:'space-between', width:'280px'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400}}>Of which terminated:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary,fontWeight:500}}>{selectedFund?.terminatedBaseCapital}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper elevation={3} sx={{backgroundColor:theme.palette.background.paper,padding:'1em'}}>\r\n                <Grid container spacing={1} sx={{display:'flex', justifyContent:'space-between', alignItems:'flex-start', flexDirection:'row'}}>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Net DPI:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                {selectedFund?.kpis && selectedFund.kpis.netDPI?selectedFund.kpis.netDPI:''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400}}>Gross DPI:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary,fontWeight:500}}>\r\n                                {selectedFund?.kpis && selectedFund.kpis.grossDPI?selectedFund.kpis.grossDPI:''}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                        <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Net TVPI:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                {selectedFund?.kpis && selectedFund.kpis.netTVPI?selectedFund.kpis.netTVPI:''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Gross TVPI:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                {selectedFund?.kpis && selectedFund.kpis.grossTVPI?selectedFund.kpis.grossTVPI:''}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={1} item xs={12} md={4} lg={4} sx={{display:'flex',  flexDirection:'column'}}>\r\n                        <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Net IRR:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                {selectedFund?.kpis && selectedFund.kpis.netIRR? `${(selectedFund.kpis.netIRR * 100).toFixed(2)} %`:''}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item sx={{display:'flex'}}>\r\n                            <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400}}>Gross IRR:</Typography>\r\n                            <Typography sx={{color:theme.palette.text.primary, fontWeight:500}}>\r\n                                {selectedFund?.kpis && selectedFund.kpis.grossIRR?selectedFund.kpis.grossIRR:''}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container spacing={3} sx={{display:'flex', justifyContent:'space-between', alignItems:'flex-start', flexDirection:'row', paddingLeft:'0.2em', paddingTop:'0.8em'}}>\r\n                        <Grid item  xs={12} md={3} lg={3} sx={{display:'flex',  flexDirection:'column'}}>\r\n                            <Paper elevation={3} sx={{backgroundColor:theme.palette.mode==='light' ? 'rgba(37, 96, 126, 0.2)' : 'rgb(128, 192, 128,0.2)', padding:'0.5em',minHeight:'125px'}}>\r\n                                <Grid item sx={{display:'flex', justifyContent:'space-between', marginBottom:'0.5em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:600, fontSize:16}}>Capital Called:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary, fontWeight:600, fontSize:14, textAlign:'right', alignSelf:'end'}}>\r\n                                    {selectedFund?.totalCommitmentsFundCcy?`${amountValueFormatter(selectedFund?.totalCommitmentsFundCcy??0,'')} ${selectedFund?.currency}`:''}\r\n                                </Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between',marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400, fontSize:14}}>For investments:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600,fontSize:14,textAlign:'right'}}>{calculateForInvestments(selectedFund?.totalCommitmentsFundCcy??0, selectedFund?.sumManagementFeeFundCcy??0,selectedFund?.sumSetUpFeeFundCcy??0,selectedFund?.sumOperationalExpensesFundCcy??0,selectedFund?.currency??'')}</Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between',marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400,fontSize:14}}>For fees:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600, fontSize:14,textAlign:'right'}}>{selectedFund?.sumManagementFeeFundCcy?`${amountValueFormatter(((selectedFund?.sumManagementFeeFundCcy??0) + (selectedFund?.sumSetUpFeeFundCcy??0)),'')} ${selectedFund?.currency}` :''}</Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex', justifyContent:'space-between',marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400, fontSize:14}}>For other:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary, fontWeight:600, fontSize:14, textAlign:'right', alignSelf:'end'}}>\r\n                                    {selectedFund?.sumOperationalExpensesFundCcy? `${amountValueFormatter(selectedFund?.sumOperationalExpensesFundCcy??0,'')} ${selectedFund?.currency}` :''}\r\n                                </Typography>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3} lg={3} sx={{display:'flex',  flexDirection:'column'}}>\r\n                            <Paper elevation={3} sx={{backgroundColor:theme.palette.mode==='light' ? 'rgba(37, 96, 126, 0.2)' : 'rgb(128, 192, 128,0.2)', padding:'0.5em', minHeight:'125px'}}>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between',marginBottom:'0.5em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:600, fontSize:16}}>Capital Invested:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary, fontWeight:600,fontSize:14, textAlign:'right', alignSelf:'end'}}>\r\n                                    {selectedFund?.sumAmountInvestedFundCCy? `${amountValueFormatter(selectedFund?.sumAmountInvestedFundCCy??0,'')} ${selectedFund?.currency}` :''}\r\n                                </Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between',marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400,fontSize:14}}>Of which realized:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600,fontSize:14,textAlign:'right'}}>\r\n                                    {selectedFund?.sumAmountRealizedFundCCy? `${amountValueFormatter(selectedFund?.sumAmountRealizedFundCCy??0,'')} ${selectedFund?.currency}` :''}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between', marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400,fontSize:14}}>Of which unrealized:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600,fontSize:14,textAlign:'right'}}>\r\n                                    {calculateUnrealized(selectedFund?.sumAmountInvestedFundCCy??0, selectedFund?.sumAmountRealizedFundCCy??0, selectedFund?.currency??'')}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3} lg={3} sx={{display:'flex',  flexDirection:'column'}}>\r\n                            <Paper elevation={3} sx={{backgroundColor:theme.palette.mode==='light' ? 'rgba(37, 96, 126, 0.2)' : 'rgb(128, 192, 128,0.2)', padding:'0.5em',minHeight:'125px'}}>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between', marginBottom:'0.5em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:600, fontSize:16}}>Capital Distributed:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary, fontWeight:600, fontSize:14,textAlign:'right', alignSelf:'end'}}>\r\n                                    {calculateDistributed(selectedFund?.sumRecycleFundCccy??0, selectedFund?.sumNonRecycleFundCccy??0, selectedFund?.currency??'')}\r\n                                </Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between', marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400,fontSize:14}}>Of which recycling:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600,fontSize:14,textAlign:'right'}}>\r\n                                 {selectedFund?.sumRecycleFundCccy? `${amountValueFormatter(selectedFund?.sumRecycleFundCccy??0,'')} ${selectedFund?.currency}` :''}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between', marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400,fontSize:14}}>Of which non-recycle:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600,fontSize:14,textAlign:'right'}}>\r\n                                    {selectedFund?.sumNonRecycleFundCccy? `${amountValueFormatter(selectedFund?.sumNonRecycleFundCccy??0,'')} ${selectedFund?.currency}` :''}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3} lg={3} sx={{display:'flex',  flexDirection:'column'}}>\r\n                             <Paper elevation={3} sx={{backgroundColor:theme.palette.mode==='light' ? 'rgba(37, 96, 126, 0.2)' : 'rgb(128, 192, 128,0.2)', padding:'0.5em',minHeight:'125px'}}>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between', marginBottom:'0.5em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:600, fontSize:16}}>Carried Interest:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary, fontWeight:600,fontSize:14, textAlign:'right', alignSelf:'end'}}>\r\n                                    {calculateCarriedInterest(selectedFund?.sumEscrowFundCccy??0, selectedFund?.sumReleasedDistributionsFundCccy??0, selectedFund?.currency??'')}\r\n                                </Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between',marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em',fontWeight:400,fontSize:14}}>Of which in escrow:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600,fontSize:14,textAlign:'right'}}>\r\n                                    {selectedFund?.sumEscrowFundCccy? `${amountValueFormatter(selectedFund?.sumEscrowFundCccy??0,'')} ${selectedFund?.currency}` :''}                                    \r\n                                </Typography>\r\n                                </Grid>\r\n                                <Grid item sx={{display:'flex',justifyContent:'space-between',marginBottom:'0.3em'}}>\r\n                                <Typography sx={{color:theme.palette.secondary.main, marginRight:'0.5em', fontWeight:400,fontSize:14,}}>Of which released:</Typography>\r\n                                <Typography sx={{color:theme.palette.text.primary,fontWeight:600,fontSize:14,textAlign:'right'}}>\r\n                                    {selectedFund?.sumReleasedDistributionsFundCccy? `${amountValueFormatter(selectedFund?.sumReleasedDistributionsFundCccy??0,'')} ${selectedFund?.currency}` :''} \r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SingleFundBasic;","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { CommitmentBasic, Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\nimport { fetchCashCalls } from '../../../../redux/thunks/cashCallsThunk';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height:'100%',\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingRight:'0.7em',\r\n        }\r\n    })\r\n);\r\n\r\nconst SingleFundCommitments = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {selectedFund} = useSelector((state: RootState) => state.funds);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<CommitmentBasic[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'CRM ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'LP ID',\r\n                field: 'id',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Short Name',\r\n                field: 'shortName',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field:'fundCurrency',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.fundCurrency ? params.data?.fundCurrency.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'fundCurrency'),\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Commitment',\r\n                field: 'committedAmount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'committedAmount',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Commitment Date',\r\n                field: 'date',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'End of IP Date',\r\n                field: 'ipDate',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Transfer',\r\n                field: 'transfer',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.transfered ? 'x' : '';\r\n                },\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        setRowData(selectedFund?.lps??[]);\r\n    },[selectedFund])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default SingleFundCommitments;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Accordion, AccordionDetails, AccordionSummary, Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, ToggleButton, ToggleButtonGroup, Toolbar, Typography, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\nimport { capitalizeLetters } from '../../../../helpers/app';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { fetchPCOs, fetchPCOsFinantials } from '../../../../redux/thunks/pcoThunk';\r\nimport moment from 'moment';\r\nimport { setPCOsExtended } from '../../../../redux/slices/lps/lpsSlice';\r\nimport { fetchTransactions } from '../../../../redux/thunks/transactionsThunk';\r\nimport PortfolioByStage from '../../../lps/single/portfolios/PortfolioByStage';\r\nimport PortfolioByCountry from '../../../lps/single/portfolios/PortfolioByCountry';\r\nimport PortfolioByIndustry from '../../../lps/single/portfolios/PortfolioByIndustry';\r\nimport InvestmentsOverTime from '../../../lps/single/portfolios/InvestmentsOverTime';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow:'hidden',\r\n            marginRight:'1em'\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        },\r\n        toolbar: {\r\n            padding: 5\r\n        },\r\n    })\r\n);\r\n\r\nconst SingleFundPortfolios = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {selectedFund} = useSelector((state: RootState) => state.funds);\r\n    const {pcos, pcosFinancials} = useSelector((state: RootState) => state.pcos);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<any[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n    const [selectedView,setSelectedView]=useState<string>('Calls');\r\n    const [isPortfolioByCountryExpand, setIsPortfolioByCountryExpand]=useState<boolean>(false);\r\n    const [isPortfolioByStageExpand, setIsPortfolioByStageExpand]=useState<boolean>(false);\r\n    const [isPortfolioByIndustryExpand, setIsPortfolioByIndustryExpand]=useState<boolean>(false);\r\n     const [isPortfolioByInvestmentsExpand, setIsPortfolioByInvestmentExpand]=useState<boolean>(false);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        sideBar: DefaultSideBarDef,\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Short',\r\n                field: 'shortName',\r\n                tooltipField: 'shortName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.shortName ? capitalizeLetters(params.data?.shortName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: 'PCO Name',\r\n                field: 'pcoName',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoName ? capitalizeLetters(params.data?.pcoName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: '1st Investment',\r\n                field:'dateFirstInvestment',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Investment EUR',\r\n                field: 'amountInvested',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountInvested',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'NAV EUR',\r\n                field: 'navEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'navEUR',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Country',\r\n                field: 'country',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Industry 1',\r\n                field: 'industry1',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Industry 2',\r\n                field: 'industry2',\r\n                hide:true,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Industry 3',\r\n                field: 'industry3',\r\n                hide:true,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Industry 4',\r\n                field: 'industry4',\r\n                hide:true,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Current Stage',\r\n                field: 'currentStage',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Initial Stage',\r\n                field: 'initialtStage',\r\n                hide:true,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Date Exit',\r\n                field:'dateExit',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    const handleChangeVaue=(value:any)=>{\r\n        setSelectedView(value);\r\n    };\r\n\r\n\r\n    const handleAccordionExp=(expanded: boolean, accordionId: string)=> {\r\n        if(accordionId==='card-countries'){\r\n            setIsPortfolioByCountryExpand(!isPortfolioByCountryExpand);\r\n        } else if(accordionId==='card-stage'){\r\n            setIsPortfolioByStageExpand(!isPortfolioByStageExpand);\r\n        } else if(accordionId==='card-industry'){\r\n            setIsPortfolioByIndustryExpand(!isPortfolioByIndustryExpand);\r\n        } else{\r\n            setIsPortfolioByInvestmentExpand(!isPortfolioByInvestmentsExpand);\r\n        }\r\n    };\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n      useEffect(()=>{\r\n        dispatch(fetchPCOs());\r\n        dispatch(fetchPCOsFinantials());\r\n        dispatch(fetchTransactions());\r\n    },[dispatch])\r\n\r\n    useEffect(()=>{\r\n        if(selectedFund && pcos &&selectedFund.pcos&& selectedFund.pcos?.length>0 && pcosFinancials?.length>0){\r\n            let data = selectedFund.pcos.map(pco=>({\r\n                ...pco,\r\n                pcoName: pcos.filter(x=>x.id===pco.id)[0]?.pcoName??'',\r\n                country: pcos.filter(x=>x.id===pco.id)[0]?.country??'',\r\n                dateFirstInvestment: pcos.filter(x=>x.id===pco.id)[0]?.dateInitalInvestment ??'',\r\n                currentStage: pcos.filter(x=>x.id===pco.id)[0]?.currentStage??'',\r\n                initalStage: pcos.filter(x=>x.id===pco.id)[0]?.initialStage??'',\r\n                dateExit: pcos.filter(x=>x.id===pco.id)[0]?.dateExit ??'',\r\n                emeraldIndustry1: pcos.filter(x=>x.id===pco.id)[0]?.emeraldIndustry1,\r\n                emeraldIndustry2: pcos.filter(x=>x.id===pco.id)[0]?.emeraldIndustry2,\r\n                navEUR: pcosFinancials.filter(x=>x.pcoId===pco.id)[0]?.sumNavFundCcy??0\r\n            }\r\n            ));\r\n            setRowData(data??[]);\r\n            dispatch(setPCOsExtended(data))\r\n        }\r\n    },[selectedFund,pcos,pcosFinancials])\r\n\r\n    return (\r\n        <Grid container spacing={1} sx={{display:'flex', justifyContent:'flex-start',alignItems:'flex-start', flex:1,overflow:'auto', height:'100%'}}>\r\n            <Grid container item xs={12} md={12} lg={8} sx={{height:'100%',overflow:'auto'}}>\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={4} sx={{height:'100%',overflow:'auto', display:'flex', flexDirection:'column', flex:1, paddingRight:'0.7em'}}>\r\n                <Paper elevation={3} key={`card`} style={{marginBottom: '1em'}}>\r\n                    <Accordion key={`card-stage`}\r\n                                expanded={isPortfolioByStageExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-stage')}\r\n                                sx={{\r\n                                    display:'flex',\r\n                                    flex:1,\r\n                                    width: '100%',\r\n                                    height:'100%',\r\n                                    flexDirection: 'column'}}>\r\n                        <AccordionSummary\r\n                        sx={{'minHeight': '60px !important'}}\r\n                        expandIcon={\r\n                            <IconButton>\r\n                                <ExpandMoreIcon\r\n                                    sx={{pointerEvents: 'auto', cursor: 'pointer'}}/>\r\n                            </IconButton>\r\n                    }>\r\n                            <Typography variant='body1' sx={{color:theme.palette.text.primary, fontWeight:600}}>Portfolio by Stage</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                        width: '100%', display: 'flex', flex: 1, height: '100%', minHeight:'200px'\r\n                    }}>\r\n                            {isPortfolioByStageExpand && <PortfolioByStage/>}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n                <Paper elevation={3} key={`card`} style={{marginBottom: '1em'}}>\r\n                    <Accordion key={`card-countries`}\r\n                                expanded={isPortfolioByCountryExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-countries')}\r\n                                sx={{\r\n                                    display:'flex',\r\n                                    flex:1,\r\n                                    width: '100%',\r\n                                    height:'100%',\r\n                                    flexDirection: 'column'}}>\r\n                        <AccordionSummary \r\n                        sx={{height: '60px'}}\r\n                        expandIcon={\r\n                            <IconButton>\r\n                                <ExpandMoreIcon\r\n                                    sx={{pointerEvents: 'auto', cursor: 'pointer'}}/>\r\n                            </IconButton>\r\n                    }>\r\n                            <Typography variant='body1' sx={{color:theme.palette.text.primary, fontWeight:600}}>Portfolio by Country</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                        width: '100%', display: 'flex', flex: 1, height: '100%', minHeight:'200px'\r\n                    }}>\r\n                            {isPortfolioByCountryExpand && <PortfolioByCountry/>}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n                <Paper elevation={3} key={`card`} style={{marginBottom: '1em'}}>\r\n                    <Accordion key={`card-industry`}\r\n                                expanded={isPortfolioByIndustryExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-industry')}\r\n                                sx={{\r\n                                    display:'flex',\r\n                                    flex:1,\r\n                                    width: '100%',\r\n                                    height:'100%',\r\n                                    flexDirection: 'column'}}>\r\n                        <AccordionSummary \r\n                        sx={{'minHeight': '60px !important'}}\r\n                        expandIcon={\r\n                            <IconButton>\r\n                                <ExpandMoreIcon\r\n                                    sx={{pointerEvents: 'auto', cursor: 'pointer'}}/>\r\n                            </IconButton>\r\n                    }>\r\n                            <Typography variant='body1' sx={{color:theme.palette.text.primary, fontWeight:600}}>Portfolio by Industry</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                        width: '100%', display: 'flex', flex: 1, height: '100%', minHeight:'200px'\r\n                    }}>\r\n                            {isPortfolioByIndustryExpand && <PortfolioByIndustry/>}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n                <Paper elevation={3} key={`card`} style={{marginBottom: '1em'}}>\r\n                    <Accordion key={`card-investments`}\r\n                                expanded={isPortfolioByInvestmentsExpand}\r\n                                onChange={(event, expanded: boolean) => handleAccordionExp(expanded, 'card-investments')}\r\n                                sx={{\r\n                                    display:'flex',\r\n                                    flex:1,\r\n                                    width: '100%',\r\n                                    height:'100%',\r\n                                    flexDirection: 'column'}}>\r\n                        <AccordionSummary \r\n                        sx={{'minHeight': '60px !important'}}\r\n                        expandIcon={\r\n                            <IconButton>\r\n                                <ExpandMoreIcon\r\n                                    sx={{pointerEvents: 'auto', cursor: 'pointer'}}/>\r\n                            </IconButton>\r\n                    }>\r\n                            <Typography variant='body1' sx={{color:theme.palette.text.primary, fontWeight:600}}>Investments Over Time</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails style={{\r\n                        width: '100%', display: 'flex', flex: 1, height: '100%', minHeight:'200px'\r\n                    }}>\r\n                            {isPortfolioByInvestmentsExpand && <InvestmentsOverTime/>}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Paper>\r\n            </Grid>\r\n            </Grid>\r\n    );\r\n};\r\n\r\n\r\nexport default SingleFundPortfolios;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\nimport { capitalizeLetters } from '../../../../helpers/app';\r\nimport { fetchTransactions } from '../../../../redux/thunks/transactionsThunk';\r\nimport { Transaction } from '../../../../models/transactions/transactionsModels';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingRight:'0.7em'\r\n        }\r\n    })\r\n);\r\n//and (PCO_ID='Actn01' or PCO_ID='Agan01' or PCO_ID='Alph01' or PCO_ID='Elco01' or PCO_ID='Ensp01' or PCO_ID='Fido01' or PCO_ID='Futu01' or PCO_ID='GeoD01' or PCO_ID='Hydr01' or PCO_ID='Imag01' or PCO_ID='Libr01' or PCO_ID='Meea01' or PCO_ID='MetG01' or PCO_ID='Open01' or PCO_ID='Opti01' or PCO_ID='P9701' or PCO_ID='Phas01' or PCO_ID='Powe02' or PCO_ID='Rhom01' or PCO_ID='Secu01' or PCO_ID='Sewe01' or PCO_ID='Skyl01' or PCO_ID='Sofi01' or PCO_ID='Spea01' or PCO_ID='Trop01' or PCO_ID='Urge01' or PCO_ID='Ushr01' or PCO_ID='Vise01' or PCO_ID='Xfar01')\r\n\r\nconst SingleFundTransactions = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {selectedFund} = useSelector((state: RootState) => state.funds);\r\n    const {transactions} = useSelector((state: RootState) => state.transactions);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<Transaction[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Transaction ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Date',\r\n                field: 'date',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                field: 'fundId',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Investment Type',\r\n                field: 'investmentType',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'PCO ID',\r\n                field: 'pcoId',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Security Type',\r\n                field: 'securityType',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Amount Fund Currency',\r\n                field: 'amountFundCurrency',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountFundCurrency',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Amount Local Currency',\r\n                field: 'amountLocalCurrency',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amountLocalCurrency',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Forex NT',\r\n                field: 'forexNT',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'forexNT',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Pre Money Valuation',\r\n                field: 'preMoneyValuation',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'preMoneyValuation',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Post Money Valuation',\r\n                field: 'postMoneyValuation',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'postMoneyValuation',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Warrant Security Type',\r\n                field: 'warrantSecurityType',\r\n                enableRowGroup: true,\r\n                hide:true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Warrant Strike',\r\n                field: 'warrantStrike',\r\n                enableRowGroup: true,\r\n                hide:true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'warrantStrike',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Due Date',\r\n                field: 'dueDate',\r\n                hide:true,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTransactions());\r\n    },[dispatch])\r\n\r\n    useEffect(()=>{\r\n        if(selectedFund && transactions){\r\n            const filteredData = transactions?.filter(item =>item.fundId===selectedFund.id);\r\n            \r\n            setRowData(filteredData??[]);\r\n        }\r\n    },[transactions,selectedFund])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{flex:1}}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default SingleFundTransactions;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { CommitmentBasic, Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\nimport { fetchCashCalls } from '../../../../redux/thunks/cashCallsThunk';\r\nimport { CashCall } from '../../../../models/cashCalls/cashCallsModels';\r\nimport { fetchFunds } from '../../../../redux/thunks/fundThunk';\r\nimport { fetchPCOs } from '../../../../redux/thunks/pcoThunk';\r\nimport { capitalizeLetters } from '../../../../helpers/app';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height:'100%',\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst SingleFundCallsTable = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {cashCalls} = useSelector((state: RootState) => state.cashCalls);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<CashCall[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Call ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                field: 'fundId',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'LP ID',\r\n                field: 'lpId',\r\n                hide:true,\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'LP Type',\r\n                field: 'lpType',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'PCO Short Name',\r\n                field: 'pcoShortName',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoShortName ? capitalizeLetters(params.data?.pcoShortName) : params.data?.pcoId;\r\n                }\r\n            },\r\n            {\r\n                headerName: 'Call Date',\r\n                field: 'callDate',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Due Date',\r\n                field: 'dueDate',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amount',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n      useEffect(()=>{\r\n        dispatch(fetchCashCalls());\r\n    },[dispatch])\r\n\r\n    useEffect(()=>{\r\n        if(selectedLP && selectedLP.pcos && selectedLP.pcos.length>0 && cashCalls){\r\n            let data = cashCalls?.filter(x=>x.lpId===selectedLP.id);\r\n            data = data.map((item)=>({\r\n                ...item,\r\n                pcoShortName:selectedLP?.pcos?.filter(x=>x.id===item.pcoId)[0]?.shortName??''\r\n        }))\r\n            setRowData(data??[]);\r\n        }\r\n    },[cashCalls,selectedLP])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default SingleFundCallsTable;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { CommitmentBasic, Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\nimport { fetchCashCalls } from '../../../../redux/thunks/cashCallsThunk';\r\nimport { CashCall } from '../../../../models/cashCalls/cashCallsModels';\r\nimport { DistributionBasic } from '../../../../models/distributions/distributionsModels';\r\nimport { fetchAllDistributions } from '../../../../redux/thunks/distributionsThunk';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height:'100%',\r\n            overflow:'hidden',\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n        }\r\n    })\r\n);\r\n\r\nconst SingleFundDistributionsTable = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {distributions} = useSelector((state: RootState) => state.distributions);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<DistributionBasic[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Distribution ID',\r\n                field: 'id',\r\n                tooltipField: 'id',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Fund ID',\r\n                field: 'fundId',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'LP ID',\r\n                field: 'lpId',\r\n                enableRowGroup: true,\r\n                hide:true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'LP Type',\r\n                field: 'lpType',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'PCO Short Name',\r\n                field: 'pcoShortName',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Notice Date',\r\n                field: 'noticeDate',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Distribution Date',\r\n                field: 'distDate',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: dateValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'amount',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n    useEffect(()=>{\r\n        dispatch(fetchAllDistributions());\r\n    },[dispatch])\r\n\r\n    useEffect(()=>{\r\n        if(selectedLP && selectedLP.pcos && selectedLP.pcos.length>0 && distributions){\r\n            let data = distributions?.filter(x=>x.lpId===selectedLP.id);\r\n            data = data.map((item)=>({\r\n                ...item,\r\n                pcoShortName:selectedLP?.pcos?.filter(x=>x.id===item.pcoId)[0]?.shortName??''\r\n        }))\r\n            setRowData(data??[]);\r\n        }\r\n    },[distributions,selectedLP])\r\n\r\n    return (\r\n            <div className={clsx(getGridTheme(isDarkTheme), classes.fill)}>\r\n                <AgGridReact gridOptions={gridOptions}\r\n                            columnDefs={getColumnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={onGridReady}\r\n                            loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                            loadingOverlayComponent={AGGridLoader}\r\n                            tooltipShowDelay={0}\r\n                            tooltipHideDelay={10000}\r\n                            />\r\n            </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default SingleFundDistributionsTable;\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {Alert,Autocomplete,AutocompleteRenderInputParams,capitalize, Grid, IconButton, InputAdornment, Paper, Snackbar, TextField, ToggleButton, ToggleButtonGroup, Toolbar, Typography, useTheme} from '@mui/material';\r\nimport {AgGridReact} from 'ag-grid-react';\r\nimport {GridApi, GridOptions, GridReadyEvent, ICellRendererParams, ValueGetterParams} from 'ag-grid-community';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport clsx from 'clsx';\r\nimport {ColDef, ColGroupDef, ValueSetterParams} from 'ag-grid-community/dist/lib/entities/colDef';\r\nimport { useAppDispatch } from '../../../../redux/store';\r\nimport { RootState } from '../../../../redux/slices/rootSlice';\r\nimport { Fund, LP, PCO } from '../../../../models/lps/lpModels';\r\nimport { FundSummary } from '../../../../models/funds/fundModels';\r\nimport { dateValueFormatter, DefaultSideBarDef, getGridTheme, DefaultColumnDef,DefaultStatusPanelDef, quantityValueFormatter, percentageyValueFormatter } from '../../../../helpers/agGrid';\r\nimport AGGridLoader from '../../../shared/AGGridLoader';\r\nimport { PCOSummary } from '../../../../models/pcos/pcoModels';\r\nimport { capitalizeLetters } from '../../../../helpers/app';\r\nimport SingleFundCallsTable from './FundCallsTable';\r\nimport SingleFundDistributionsTable from './FundDistributionTable';\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flex: 1,\r\n            height: '100%',\r\n            overflow:'hidden',\r\n            marginRight:'1em'\r\n        },\r\n        fill: {\r\n            flex: 1,\r\n            width: '100%',\r\n            height: '100%',\r\n            paddingLeft:'0.4em',\r\n            paddingBottom:'0.5em',\r\n        },\r\n        toolbar: {\r\n            padding: 5\r\n        },\r\n    })\r\n);\r\n\r\nconst SingleFundCallsAndDistributions = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch();\r\n    const isDarkTheme = useSelector((state: RootState) => state.app.isDarkTheme);\r\n    const {lps,selectedLP} = useSelector((state: RootState) => state.lps);\r\n    const {funds} = useSelector((state: RootState) => state.funds);\r\n    const [gridApi, setGridApi] = useState<GridApi>();\r\n    const [value, setValue] = useState<string>('');\r\n    const [hasError, setHasError] = useState(false);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n    const theme = useTheme();\r\n    const [rowData,setRowData]=useState<Fund[]>([]);\r\n    const [selectedLPValue, setSelectedLPValue] = useState<LP | null>(null);\r\n    const [selectedPCOValue, setSelectedPCOValue] = useState<PCOSummary | null>(null);\r\n    const [searchTextValue, setSearchTextValue] = useState<string | null>(null);\r\n    const [selectedView,setSelectedView]=useState<string>('Calls');\r\n\r\n    const gridOptions: GridOptions = {\r\n        defaultColDef: DefaultColumnDef,\r\n        enableCellChangeFlash: true,\r\n        enableRangeSelection: true,\r\n        animateRows: true,\r\n        pagination: true,\r\n        enableCellTextSelection: true,\r\n        groupDisplayType: 'multipleColumns',\r\n        statusBar: DefaultStatusPanelDef,\r\n    };\r\n\r\n    const getColumnDefs = useMemo((): (ColDef | ColGroupDef)[] => {\r\n        return [\r\n            {\r\n                headerName: 'Short',\r\n                field: 'shortPCOName',\r\n                tooltipField: 'shortPCOName',\r\n                suppressFiltersToolPanel: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.shortPCOName ? capitalizeLetters(params.data?.shortPCOName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: 'PCO Name',\r\n                field: 'pcoName',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueGetter: (params) => {\r\n                    return params.data?.pcoName ? capitalizeLetters(params.data?.pcoName) : '';\r\n                }\r\n            },\r\n            {\r\n                headerName: '1st Co-Investment',\r\n                field:'firstCoinvestment',\r\n                enableRowGroup: true,\r\n                valueGetter: (params) => {\r\n                    return params.data?.firstCoinvestment ? params.data?.firstCoinvestment.toUpperCase() : '';\r\n                },\r\n                valueSetter: (params) => valueSetter(params, 'firstCoinvestment'),\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Investment EUR',\r\n                field: 'investmentEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'investmentEUR',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'NAV EUR',\r\n                field: 'navEUR',\r\n                enableRowGroup: true,\r\n                type: 'numericColumn',\r\n                tooltipField: 'navEUR',\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n                valueFormatter: quantityValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Country',\r\n                field: 'country',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Industry',\r\n                field: 'industry',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n            {\r\n                headerName: 'Stage',\r\n                field: 'stage',\r\n                enableRowGroup: true,\r\n                cellStyle: {fontFamily: 'Raleway', color: theme.palette.text.primary},\r\n            },\r\n        ];\r\n    }, [theme]);\r\n\r\n    const onValueChange =  useCallback((event: any) => {\r\n        setSearchTextValue(event.target.value)\r\n        if(gridApi){\r\n            gridApi.setQuickFilter(event.target.value);\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setSearchTextValue('');\r\n        if(gridApi){\r\n            gridApi.setQuickFilter('');\r\n        }\r\n    },[gridApi]);\r\n\r\n    const onGridReady = (params:GridReadyEvent) => {\r\n        setGridApi(params?.api);\r\n    };\r\n\r\n    const valueSetter = (params:ValueSetterParams, field:string) => {\r\n        const value = params.newValue;\r\n        const data = params.data;\r\n        if (data[field] !== value) {\r\n            data[field] = value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setHasError(false);\r\n    };\r\n\r\n    const loadingOverlayRendererParams = useMemo(() => {\r\n        return {\r\n            loadingMessage: 'Loading Funds Overview...',\r\n        };\r\n    }, []);\r\n\r\n\r\n    const handleChangeVaue=(value:any)=>{\r\n        setSelectedView(value);\r\n    };\r\n\r\n   /*  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n        return {\r\n          minWidth: 300,\r\n          cellRendererParams: {\r\n            footerValueGetter: (params: any) => {\r\n              const isRootLevel = params.node.level === -1;\r\n              if (isRootLevel) {\r\n                return 'Total';\r\n              }\r\n              else\r\n               return `Sub Total (${params.value})`;\r\n            },\r\n          },\r\n        };\r\n      }, []);\r\n\r\n      const createData: (count: number, gridApi:GridApi|null) => any[] = (\r\n        count: number,\r\n      ) => {\r\n        var result: any[] = [];\r\n        for (var i = 0; i < count; i++) {\r\n          result.push({\r\n            short: 'Total',\r\n            name: gridApi?gridApi.paginationGetRowCount():0,\r\n            totalCommitments: count,\r\n            totalInvestments:count,\r\n            reservesFees:count,\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      const pinnedBottomRowData = useMemo<any[]>(() => {\r\n        return createData(1, gridApi??null);\r\n      }, [gridApi]);\r\n */\r\n\r\n    useEffect(()=>{\r\n        setRowData(selectedLP?.funds??[]);\r\n    },[selectedLP])\r\n\r\n    return (\r\n        <Paper elevation={3} className={classes.root} sx={{paddingRight:'0.5em'}}>\r\n            <Grid container\r\n                  style={{\r\n                      display: 'flex',\r\n                      justifyContent: 'start',\r\n                      alignItems: 'start',\r\n                      flexDirection: 'column',\r\n                      flex: 1,\r\n                  }}>\r\n                    <Toolbar variant=\"dense\" disableGutters className={classes.toolbar}>\r\n                        <Grid container\r\n                            style={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'flex-start',\r\n                                width: '100%'\r\n                            }}>\r\n                            <Grid item style={{flex: 1}}>\r\n                                <ToggleButtonGroup\r\n                                    size=\"small\"\r\n                                    exclusive\r\n                                    sx={{border:`1px solid ${theme.palette.primary.main}`}}\r\n                                    style={{cursor: 'pointer'}}\r\n                                    value={selectedView}\r\n                                    onChange={(e, value) => {\r\n                                        if (value) {\r\n                                            handleChangeVaue(value);\r\n                                        }\r\n                                    }}>\r\n                                    <ToggleButton value=\"Calls\" style={{\r\n                                        textTransform: 'none',\r\n                                        fontSize: 14,\r\n                                        height: 32,\r\n                                        width: 154,\r\n                                        cursor: 'pointer',\r\n                                        backgroundColor: selectedView === 'Calls' ? theme.palette.primary.main : 'transparent'\r\n\r\n                                    }}>\r\n                                        <Typography style={{\r\n                                            padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                            color: selectedView === 'Calls' ? 'white' : theme.palette.primary.main \r\n                                        }}\r\n                                                    variant={'body2'}> {'Calls'}</Typography>\r\n\r\n                                    </ToggleButton>\r\n                                    <ToggleButton value=\"Distributions\"\r\n                                                style={{\r\n                                                    textTransform: 'none',\r\n                                                    fontSize: 14,\r\n                                                    height: 32,\r\n                                                    width: 154,\r\n                                                    backgroundColor: selectedView === 'Distributions' ? theme.palette.primary.main : 'transparent'\r\n                                                }}>\r\n                                        <Typography style={{\r\n                                            padding: '0.1em', fontWeight: 800, fontSize: '12px',\r\n                                            color: selectedView === 'Distributions' ? 'white' : theme.palette.primary.main \r\n                                        }}\r\n                                                    variant={'body2'}> {'Distributions'}</Typography>\r\n                                    </ToggleButton>\r\n                                </ToggleButtonGroup>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Toolbar>\r\n                    {selectedView==='Calls' ? <SingleFundCallsTable/> : <SingleFundDistributionsTable/>}\r\n               {/*  <div className={clsx(getGridTheme(isDarkTheme), classes.fill)} style={{flex:1}}>\r\n                    <AgGridReact gridOptions={gridOptions}\r\n                                columnDefs={getColumnDefs}\r\n                                rowData={rowData}\r\n                                onGridReady={onGridReady}\r\n                                loadingOverlayComponentParams={loadingOverlayRendererParams}\r\n                                loadingOverlayComponent={AGGridLoader}\r\n                                tooltipShowDelay={0}\r\n                                tooltipHideDelay={10000}\r\n                                />\r\n                </div> */}\r\n            </Grid>\r\n        </Paper>\r\n            \r\n    );\r\n};\r\n\r\n\r\nexport default SingleFundCallsAndDistributions;\r\n","import { Grid } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\nimport { setTopBarTitle } from '../../../redux/slices/appSlice';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../redux/slices/rootSlice';\r\nimport { setSelectedFund } from '../../../redux/slices/funds/fundsSlice';\r\nimport AutocompleteFundComponent from '../../../components/funds/single/AutocompleteFund';\r\nimport DatePickerFundComponent from '../../../components/funds/single/DatePickerFund';\r\nimport SelectionFundComponent from '../../../components/funds/single/SelectionComponent';\r\nimport FiltersAndActionsFundComponent from '../../../components/funds/single/FiltersAndActionsFund';\r\nimport SingleFundBasic from '../../../components/funds/single/basic/SingleFundBasic';\r\nimport SingleFundCommitments from '../../../components/funds/single/commitments/SingleFundCommitments';\r\nimport SingleFundDocuments from '../../../components/funds/single/documents/SingleFundDocuments';\r\nimport SingleFundPortfolios from '../../../components/funds/single/portfolios/SingleFundPortfolios';\r\nimport SingleFundTransactions from '../../../components/funds/single/transactions/SingleFundTransactions';\r\nimport SingleFundCallsAndDistributions from '../../../components/funds/single/callsAndDistributions/SingleFundCallsAndDistributions';\r\nimport { fetchFunds } from '../../../redux/thunks/fundThunk';\r\n\r\nconst SingleFund = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { funds, selectedFund } = useSelector((state: RootState) => state.funds);\r\n    const [selectedView, setSelectedView] = useState<string>('basic');\r\n\r\n    const handleButtonClick = (buttonId: string) => {\r\n        setSelectedView(buttonId);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchFunds());\r\n    },[dispatch])\r\n\r\n    useEffect(() => {\r\n        if (selectedFund) {\r\n            dispatch(setTopBarTitle(`${selectedFund.shortName} Details`));\r\n        } else {\r\n            dispatch(setSelectedFund(funds[0]));\r\n        }\r\n    }, [dispatch, selectedFund, funds])\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{ display: 'flex', flex: 1, width: '100%', height: '100%', justifyContent: 'flex-start', alignItems: 'start', flexDirection: 'row', paddingLeft: '0.5em' }}>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ flex: 1 }}>\r\n                <Grid container spacing={2} sx={{ display: 'flex', flex: 1, width: '100%', height: '100%', alignItems: 'start' }}>\r\n                    <Grid item xs={12} md={6} lg={6}>\r\n                        <AutocompleteFundComponent selectedFund={selectedFund}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6} lg={6} sx={{ display: 'flex', flex: 1, justifyContent: { xs: 'flex-start', md: 'flex-end', lg: 'flex-end' }, alignSelf: 'flex-end' }}>\r\n                        <DatePickerFundComponent />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ flex: 1 }}>\r\n                <Grid container spacing={2} sx={{ display: 'flex', flex: 1, width: '100%', height: '100%', alignItems: 'start' }}>\r\n                    <Grid item xs={12} md={8} lg={8}>\r\n                        <SelectionFundComponent selectedItem={selectedView} handleButtonClick={handleButtonClick} />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4} lg={4} sx={{ display: 'flex', flex: 1, justifyContent: { xs: 'flex-start', md: 'flex-end', lg: 'flex-end' }, alignSelf: 'flex-end' }}>\r\n                        <FiltersAndActionsFundComponent selectedItem={selectedView} handleButtonClick={handleButtonClick} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12} sx={{ flex: 1, height: '82%' }}>\r\n                {selectedView === 'basic' ? <SingleFundBasic />\r\n                    : selectedView === 'commitments'\r\n                        ? <SingleFundCommitments />\r\n                        : selectedView === 'portfolio'\r\n                            ? <SingleFundPortfolios />\r\n                            : selectedView === 'callsDist'\r\n                                ? <SingleFundCallsAndDistributions />\r\n                                : selectedView === 'transactions'\r\n                                    ? <SingleFundTransactions />\r\n                                    : <SingleFundDocuments />}\r\n            </Grid>\r\n        </Grid>\r\n        /*  <Grid spacing={1} container sx={{display:'flex',flex:1, height:'100%', width:'100%', paddingLeft:'0.5em', flexDirection:'row', justifyContent:'flex-start', alignItems:'flex-start', overflow:'auto' }}>\r\n             <Grid item sx={{display:'flex', justifyContent:'start', alignItems:'start', width:'100%', height:'8vh'}}>\r\n                 <SingleLPToolbar/>\r\n             </Grid>\r\n             <Grid item sx={{display:'flex', justifyContent:'start', alignItems:'start',width:'100%',height:'8vh'}}>\r\n                 <SingleSelection selectedItem={selectedView} handleButtonClick={handleButtonClick}/>\r\n             </Grid>\r\n             <Grid item sx={{display:'flex', justifyContent:'start', alignItems:'start',width:'100%', height:'82%' }}>\r\n                 {selectedView==='basic' ? <SingleLPBasic/>\r\n                 : selectedView==='commitments'\r\n                 ?<SingleLPCommitments/>\r\n                 :selectedView==='portfolio'\r\n                 ? <SingleLPPortfolios/>\r\n                 : selectedView==='callsDist'\r\n                 ?<SingleLPCallsAndDistributions/>\r\n                 : selectedView==='transactions'\r\n                 ?<SingleLPTransactions/>\r\n                 :<SingleLPDocuments/>}\r\n             </Grid>\r\n         </Grid>    */\r\n    );\r\n};\r\n\r\nexport default SingleFund;","import { FundSummary } from '../../models/funds/fundModels';\r\nimport { RestService } from '../RestService';\r\n\r\nexport class FundDataService extends RestService {\r\n    private _baseUrl = './fundsShort.json';\r\n\r\n    /**\r\n     * Gets the lp data that is in a json file in the public folder for now later will be a service\r\n     * @return LP[]\r\n     */\r\n    public async getAllFunds(): Promise<FundSummary[]> {\r\n        return this.fetchData(this._baseUrl).then((res: any) => {\r\n            return res.data;\r\n        }).catch((err: any) => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { FundDataService } from \"../../services/funds/FundService\";\r\nimport { setErrorMessage } from \"../slices/appSlice\";\r\nimport { setFunds } from \"../slices/funds/fundsSlice\";\r\n\r\n/**\r\n * Fetch all fnds\r\n */\r\nexport const fetchFunds: any = () => async (dispatch: any) => {\r\n    try {\r\n        const fundsService = new FundDataService();\r\n        const data = await fundsService.getAllFunds();\r\n        dispatch(setFunds(data));\r\n    } catch (error: any) {\r\n        dispatch(setErrorMessage(error));\r\n    }\r\n}names":["useStyles","makeStyles","createStyles","root","display","flex","height","overflow","fill","width","paddingLeft","paddingBottom","marginLeft","toolbar","padding","togglrBtnStyles","theme","border","boxShadow","grouped","borderRadius","shape","classes","btnStyles","useAppDispatch","_useSelector","useSelector","state","app","isDarkTheme","lps","selectedLP","_useState","funds","useState","_useState2","_slicedToArray","gridApi","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","useTheme","_useState9","_useState10","setRowData","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","setSearchTextValue","_useState17","_useState18","selectedView","setSelectedView","valueSetter","DefaultColumnDef","DefaultStatusPanelDef","useMemo","headerName","field","tooltipField","suppressFiltersToolPanel","cellStyle","fontFamily","color","palette","text","primary","valueGetter","params","_params$data","_params$data2","data","shortPCOName","capitalizeLetters","enableRowGroup","_params$data3","_params$data4","pcoName","_params$data5","_params$data6","firstCoinvestment","toUpperCase","type","valueFormatter","quantityValueFormatter","useCallback","event","target","value","setQuickFilter","newValue","loadingMessage","useEffect","_jsxs","Grid","container","direction","alignItems","justifyContent","spacing","sx","marginRight","marginTop","children","_jsx","item","Toolbar","variant","disableGutters","className","style","ToggleButtonGroup","size","exclusive","cursor","onChange","e","handleChangeVaue","ToggleButton","textTransform","fontSize","backgroundColor","borderLeft","borderTop","borderRight","borderBottom","concat","main","grey","Typography","fontWeight","xs","md","lg","ContractsTable","CompaniesTable","ReportsTable","autocompleteInputStyles","autocomplete","opacity","textInput","clearIndicator","inputRoot","borderColor","option","background","paper","popupIndicator","_ref","selectedFund","autocompleteInputClasses","dispatch","selectedFundValue","setSelectedFundValue","Autocomplete","id","popupIcon","ExpandMoreIcon","autoHighlight","autoSelect","autoComplete","disableClearable","isOptionEqualToValue","setSelectedFund","options","getOptionLabel","shortName","renderInput","InputProps","TextField","_objectSpread","label","minimumDate","Date","maximumDate","setDate","DatePicker","disabled","date","minDate","maxDate","isStartDate","selectedItem","handleButtonClick","ButtonGroup","Button","onClick","chart","textAlign","alignContent","fabIcon","alignSelf","searchBox","searchTextValue","onValueChange","onCancelClick","_Fragment","Fab","onFocus","blur","EditRoundedIcon","placeholder","inputProps","startAdornment","InputAdornment","position","SearchIcon","endAdornment","isValueEmpty","IconButton","CloseIcon","AddButton","pageName","ExportButton","setGridApi","rowData","gridOptions","defaultColDef","enableCellChangeFlash","enableRangeSelection","animateRows","pagination","enableCellTextSelection","groupDisplayType","statusBar","getColumnDefs","fundCurrency","loadingOverlayRendererParams","_selectedFund$lps","clsx","getGridTheme","AgGridReact","columnDefs","domLayout","onGridReady","api","loadingOverlayComponentParams","loadingOverlayComponent","AGGridLoader","tooltipShowDelay","tooltipHideDelay","_selectedFund$pcos","pcos","minWidth","maxWidth","dateValueFormatter","_selectedLP$commitmen","commitments","_selectedLP$exits","exits","summary","_selectedFund$aifm","_selectedFund$aifmCon","_selectedFund$numOfLP","_selectedFund$numOfLP2","_selectedFund$numOFPC","_selectedFund$exits$l","_selectedFund$exits","_selectedFund$currenc","_selectedFund$sumComm","_selectedFund$sumBase","_selectedFund$currenc2","_selectedFund$totalCo","_selectedFund$totalCo2","_selectedFund$sumMana","_selectedFund$sumSetU","_selectedFund$sumOper","_selectedFund$currenc3","_selectedFund$sumMana2","_selectedFund$sumSetU2","_selectedFund$sumOper2","_selectedFund$sumAmou","_selectedFund$sumAmou2","_selectedFund$sumAmou3","_selectedFund$sumAmou4","_selectedFund$currenc4","_selectedFund$sumRecy","_selectedFund$sumNonR","_selectedFund$currenc5","_selectedFund$sumRecy2","_selectedFund$sumNonR2","_selectedFund$sumEscr","_selectedFund$sumRele","_selectedFund$currenc6","_selectedFund$sumEscr2","_selectedFund$sumRele2","isCommitmentsExpand","setIsCommitmentsExpand","isFundsExpand","setIsFundsExpand","isPCOsExpand","setIsPCOsExpand","isExitsExpand","setIsExitsExpand","handleAccordionExp","expanded","accordionId","flexDirection","paddingRight","Paper","elevation","secondary","country","address","investmentComitee","vintage","moment","format","finalClosingDate","currency","aifm","aifmContact","Accordion","AccordionSummary","mode","darken","lighten","expandIcon","pointerEvents","numOfLPs","AccordionDetails","FundCommitmentsTable","FundLpsTable","terminated","length","numOFPCOs","FundPCOsTable","FundExitsTable","amountValueFormatter","sumCommittedAmountFundCcy","sumBaseAmountFundCccy","terminatedCommitedCapital","terminatedBaseCapital","kpis","netDPI","grossDPI","netTVPI","grossTVPI","netIRR","toFixed","grossIRR","paddingTop","minHeight","marginBottom","totalCommitmentsFundCcy","totalCommitments","managementFee","setUpFee","other","investments","calculateForInvestments","sumManagementFeeFundCcy","sumSetUpFeeFundCcy","sumOperationalExpensesFundCcy","sumAmountInvestedFundCCy","sumAmountRealizedFundCCy","totalInvestments","totalRealized","unrealized","Math","abs","calculateUnrealized","recycleReserves","nonRecycleReserves","distributed","calculateDistributed","sumRecycleFundCccy","sumNonRecycleFundCccy","escrow","realised","carriedInterest","calculateCarriedInterest","sumEscrowFundCccy","sumReleasedDistributionsFundCccy","transfered","_useSelector2","pcosFinancials","_useState19","_useState20","isPortfolioByCountryExpand","setIsPortfolioByCountryExpand","_useState21","_useState22","isPortfolioByStageExpand","setIsPortfolioByStageExpand","_useState23","_useState24","isPortfolioByIndustryExpand","setIsPortfolioByIndustryExpand","_useState25","_useState26","isPortfolioByInvestmentsExpand","setIsPortfolioByInvestmentExpand","sideBar","DefaultSideBarDef","hide","fetchPCOs","fetchPCOsFinantials","fetchTransactions","map","pco","_pcos$filter$0$pcoNam","_pcos$filter$","_pcos$filter$0$countr","_pcos$filter$2","_pcos$filter$0$dateIn","_pcos$filter$3","_pcos$filter$0$curren","_pcos$filter$4","_pcos$filter$0$initia","_pcos$filter$5","_pcos$filter$0$dateEx","_pcos$filter$6","_pcos$filter$7","_pcos$filter$8","_pcosFinancials$filte","_pcosFinancials$filte2","filter","x","dateFirstInvestment","dateInitalInvestment","currentStage","initalStage","initialStage","dateExit","emeraldIndustry1","emeraldIndustry2","navEUR","pcoId","sumNavFundCcy","setPCOsExtended","PortfolioByStage","PortfolioByCountry","PortfolioByIndustry","InvestmentsOverTime","transactions","filteredData","fundId","cashCalls","pcoShortName","fetchCashCalls","_data","lpId","_selectedLP$pcos$filt","_selectedLP$pcos","_selectedLP$pcos$filt2","distributions","fetchAllDistributions","_selectedLP$funds","SingleFundCallsTable","SingleFundDistributionsTable","buttonId","fetchFunds","setTopBarTitle","AutocompleteFundComponent","DatePickerFundComponent","SelectionFundComponent","FiltersAndActionsFundComponent","SingleFundBasic","SingleFundCommitments","SingleFundPortfolios","SingleFundCallsAndDistributions","SingleFundTransactions","SingleFundDocuments","FundDataService","_RestService","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","_baseUrl","_createClass","key","_getAllFunds","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","this","fetchData","then","res","catch","err","console","log","stop","RestService","fundsService","getAllFunds","sent","setFunds","t0","setErrorMessage","_x"],"sourceRoot":""}